// Generated from jvmBasic.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import jvmBasicListener from './jvmBasicListener.js';
const serializedATN = [4,1,122,909,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,1,0,4,0,204,8,0,11,0,12,0,205,1,0,1,0,1,1,1,1,1,1,1,1,3,1,214,
8,1,5,1,216,8,1,10,1,12,1,219,9,1,1,1,1,1,3,1,223,8,1,1,2,1,2,1,3,1,3,1,
4,3,4,230,8,4,1,4,1,4,1,4,3,4,235,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,3,5,302,8,5,1,6,1,6,1,6,1,6,1,6,5,6,309,8,6,10,6,12,6,312,9,6,
1,7,1,7,3,7,316,8,7,1,8,1,8,1,8,3,8,321,8,8,5,8,323,8,8,10,8,12,8,326,9,
8,1,9,1,9,1,9,1,10,3,10,332,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,354,8,12,
1,13,1,13,1,13,1,14,1,14,1,14,3,14,362,8,14,1,14,1,14,3,14,366,8,14,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,376,8,15,1,15,1,15,1,15,3,15,381,
8,15,3,15,383,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,393,8,16,
1,17,1,17,1,17,1,17,5,17,399,8,17,10,17,12,17,402,9,17,3,17,404,8,17,1,18,
1,18,1,18,3,18,409,8,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
25,1,25,1,25,3,25,438,8,25,1,25,1,25,1,25,1,25,1,25,5,25,445,8,25,10,25,
12,25,448,9,25,1,26,1,26,1,26,1,26,1,26,3,26,455,8,26,1,26,1,26,1,26,1,26,
1,26,5,26,462,8,26,10,26,12,26,465,9,26,1,27,1,27,1,27,1,27,1,27,1,28,1,
28,1,28,1,28,1,28,1,28,5,28,478,8,28,10,28,12,28,481,9,28,1,29,1,29,1,29,
1,29,1,29,1,29,5,29,489,8,29,10,29,12,29,492,9,29,1,30,1,30,1,30,1,31,1,
31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,
512,8,34,5,34,514,8,34,10,34,12,34,517,9,34,1,35,1,35,3,35,521,8,35,1,36,
1,36,1,36,1,36,1,36,1,36,3,36,529,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
3,37,538,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,547,8,38,1,39,1,39,
3,39,551,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,
44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,
50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,3,53,617,8,53,1,54,1,54,1,54,
1,54,1,54,3,54,624,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,
1,59,1,59,1,60,3,60,639,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,
678,8,61,1,62,3,62,681,8,62,1,62,3,62,684,8,62,1,62,1,62,1,63,1,63,1,63,
5,63,691,8,63,10,63,12,63,694,9,63,1,64,1,64,1,64,5,64,699,8,64,10,64,12,
64,702,9,64,1,65,1,65,1,65,5,65,707,8,65,10,65,12,65,710,9,65,1,66,1,66,
1,66,1,66,3,66,716,8,66,1,67,1,67,1,67,1,67,5,67,722,8,67,10,67,12,67,725,
9,67,3,67,727,8,67,1,68,1,68,3,68,731,8,68,1,69,1,69,5,69,735,8,69,10,69,
12,69,738,9,69,1,70,1,70,1,71,1,71,1,71,5,71,745,8,71,10,71,12,71,748,9,
71,1,72,1,72,1,72,5,72,753,8,72,10,72,12,72,756,9,72,1,73,1,73,1,73,1,73,
1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,
76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,
1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,
81,1,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,
1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,
86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,
1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,
91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,
1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,
97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,
100,1,100,1,100,1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
194,196,198,200,0,8,2,0,4,4,114,114,2,0,27,27,37,37,1,0,18,19,1,0,120,121,
1,0,20,21,1,0,73,74,1,0,119,120,1,0,1,2,961,0,203,1,0,0,0,2,209,1,0,0,0,
4,224,1,0,0,0,6,226,1,0,0,0,8,234,1,0,0,0,10,301,1,0,0,0,12,303,1,0,0,0,
14,313,1,0,0,0,16,317,1,0,0,0,18,327,1,0,0,0,20,331,1,0,0,0,22,335,1,0,0,
0,24,353,1,0,0,0,26,355,1,0,0,0,28,358,1,0,0,0,30,367,1,0,0,0,32,384,1,0,
0,0,34,394,1,0,0,0,36,405,1,0,0,0,38,412,1,0,0,0,40,415,1,0,0,0,42,418,1,
0,0,0,44,421,1,0,0,0,46,424,1,0,0,0,48,429,1,0,0,0,50,432,1,0,0,0,52,449,
1,0,0,0,54,466,1,0,0,0,56,471,1,0,0,0,58,482,1,0,0,0,60,493,1,0,0,0,62,496,
1,0,0,0,64,499,1,0,0,0,66,503,1,0,0,0,68,507,1,0,0,0,70,520,1,0,0,0,72,522,
1,0,0,0,74,530,1,0,0,0,76,539,1,0,0,0,78,548,1,0,0,0,80,559,1,0,0,0,82,564,
1,0,0,0,84,568,1,0,0,0,86,572,1,0,0,0,88,576,1,0,0,0,90,580,1,0,0,0,92,584,
1,0,0,0,94,591,1,0,0,0,96,598,1,0,0,0,98,602,1,0,0,0,100,605,1,0,0,0,102,
608,1,0,0,0,104,611,1,0,0,0,106,614,1,0,0,0,108,618,1,0,0,0,110,625,1,0,
0,0,112,628,1,0,0,0,114,631,1,0,0,0,116,633,1,0,0,0,118,635,1,0,0,0,120,
638,1,0,0,0,122,677,1,0,0,0,124,680,1,0,0,0,126,687,1,0,0,0,128,695,1,0,
0,0,130,703,1,0,0,0,132,711,1,0,0,0,134,726,1,0,0,0,136,728,1,0,0,0,138,
732,1,0,0,0,140,739,1,0,0,0,142,741,1,0,0,0,144,749,1,0,0,0,146,757,1,0,
0,0,148,762,1,0,0,0,150,767,1,0,0,0,152,772,1,0,0,0,154,777,1,0,0,0,156,
786,1,0,0,0,158,791,1,0,0,0,160,796,1,0,0,0,162,801,1,0,0,0,164,806,1,0,
0,0,166,811,1,0,0,0,168,816,1,0,0,0,170,821,1,0,0,0,172,828,1,0,0,0,174,
835,1,0,0,0,176,840,1,0,0,0,178,846,1,0,0,0,180,851,1,0,0,0,182,858,1,0,
0,0,184,863,1,0,0,0,186,868,1,0,0,0,188,873,1,0,0,0,190,878,1,0,0,0,192,
883,1,0,0,0,194,888,1,0,0,0,196,893,1,0,0,0,198,898,1,0,0,0,200,903,1,0,
0,0,202,204,3,2,1,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,
206,1,0,0,0,206,207,1,0,0,0,207,208,5,0,0,1,208,1,1,0,0,0,209,222,3,6,3,
0,210,217,3,8,4,0,211,213,5,40,0,0,212,214,3,8,4,0,213,212,1,0,0,0,213,214,
1,0,0,0,214,216,1,0,0,0,215,211,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,
217,218,1,0,0,0,218,223,1,0,0,0,219,217,1,0,0,0,220,223,5,117,0,0,221,223,
5,10,0,0,222,210,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,3,1,0,0,0,224,
225,5,108,0,0,225,5,1,0,0,0,226,227,5,120,0,0,227,7,1,0,0,0,228,230,3,4,
2,0,229,228,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,235,3,10,5,0,232,
235,5,117,0,0,233,235,5,10,0,0,234,229,1,0,0,0,234,232,1,0,0,0,234,233,1,
0,0,0,235,9,1,0,0,0,236,302,5,116,0,0,237,302,5,113,0,0,238,302,5,112,0,
0,239,302,5,71,0,0,240,302,5,72,0,0,241,302,5,63,0,0,242,302,5,64,0,0,243,
302,5,109,0,0,244,302,5,65,0,0,245,302,5,94,0,0,246,302,5,22,0,0,247,302,
5,29,0,0,248,302,5,60,0,0,249,302,5,41,0,0,250,302,5,53,0,0,251,302,5,42,
0,0,252,302,5,43,0,0,253,302,3,114,57,0,254,302,3,116,58,0,255,302,3,118,
59,0,256,302,3,110,55,0,257,302,3,108,54,0,258,302,3,106,53,0,259,302,3,
102,51,0,260,302,3,18,9,0,261,302,3,104,52,0,262,302,3,34,17,0,263,302,3,
100,50,0,264,302,3,98,49,0,265,302,3,96,48,0,266,302,3,92,46,0,267,302,3,
94,47,0,268,302,3,88,44,0,269,302,3,82,41,0,270,302,3,86,43,0,271,302,3,
84,42,0,272,302,3,90,45,0,273,302,3,64,32,0,274,302,3,66,33,0,275,302,3,
14,7,0,276,302,3,46,23,0,277,302,3,54,27,0,278,302,3,56,28,0,279,302,3,58,
29,0,280,302,3,28,14,0,281,302,3,30,15,0,282,302,3,32,16,0,283,302,3,36,
18,0,284,302,3,80,40,0,285,302,3,40,20,0,286,302,3,42,21,0,287,302,3,44,
22,0,288,302,3,48,24,0,289,302,3,38,19,0,290,302,3,50,25,0,291,302,3,52,
26,0,292,302,3,60,30,0,293,302,3,62,31,0,294,302,3,72,36,0,295,302,3,68,
34,0,296,302,3,74,37,0,297,302,3,76,38,0,298,302,3,78,39,0,299,302,3,20,
10,0,300,302,3,112,56,0,301,236,1,0,0,0,301,237,1,0,0,0,301,238,1,0,0,0,
301,239,1,0,0,0,301,240,1,0,0,0,301,241,1,0,0,0,301,242,1,0,0,0,301,243,
1,0,0,0,301,244,1,0,0,0,301,245,1,0,0,0,301,246,1,0,0,0,301,247,1,0,0,0,
301,248,1,0,0,0,301,249,1,0,0,0,301,250,1,0,0,0,301,251,1,0,0,0,301,252,
1,0,0,0,301,253,1,0,0,0,301,254,1,0,0,0,301,255,1,0,0,0,301,256,1,0,0,0,
301,257,1,0,0,0,301,258,1,0,0,0,301,259,1,0,0,0,301,260,1,0,0,0,301,261,
1,0,0,0,301,262,1,0,0,0,301,263,1,0,0,0,301,264,1,0,0,0,301,265,1,0,0,0,
301,266,1,0,0,0,301,267,1,0,0,0,301,268,1,0,0,0,301,269,1,0,0,0,301,270,
1,0,0,0,301,271,1,0,0,0,301,272,1,0,0,0,301,273,1,0,0,0,301,274,1,0,0,0,
301,275,1,0,0,0,301,276,1,0,0,0,301,277,1,0,0,0,301,278,1,0,0,0,301,279,
1,0,0,0,301,280,1,0,0,0,301,281,1,0,0,0,301,282,1,0,0,0,301,283,1,0,0,0,
301,284,1,0,0,0,301,285,1,0,0,0,301,286,1,0,0,0,301,287,1,0,0,0,301,288,
1,0,0,0,301,289,1,0,0,0,301,290,1,0,0,0,301,291,1,0,0,0,301,292,1,0,0,0,
301,293,1,0,0,0,301,294,1,0,0,0,301,295,1,0,0,0,301,296,1,0,0,0,301,297,
1,0,0,0,301,298,1,0,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,11,1,0,0,0,303,
310,3,136,68,0,304,305,5,16,0,0,305,306,3,144,72,0,306,307,5,17,0,0,307,
309,1,0,0,0,308,304,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,
0,0,311,13,1,0,0,0,312,310,1,0,0,0,313,315,7,0,0,0,314,316,3,16,8,0,315,
314,1,0,0,0,315,316,1,0,0,0,316,15,1,0,0,0,317,324,3,134,67,0,318,320,7,
1,0,0,319,321,3,134,67,0,320,319,1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,0,
322,318,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,17,1,
0,0,0,326,324,1,0,0,0,327,328,5,106,0,0,328,329,3,144,72,0,329,19,1,0,0,
0,330,332,5,31,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,
3,22,11,0,334,21,1,0,0,0,335,336,3,12,6,0,336,337,5,32,0,0,337,338,3,144,
72,0,338,23,1,0,0,0,339,354,5,23,0,0,340,341,5,25,0,0,341,354,5,32,0,0,342,
343,5,32,0,0,343,354,5,25,0,0,344,354,5,24,0,0,345,346,5,26,0,0,346,354,
5,32,0,0,347,348,5,32,0,0,348,354,5,26,0,0,349,354,3,26,13,0,350,354,5,32,
0,0,351,354,5,25,0,0,352,354,5,26,0,0,353,339,1,0,0,0,353,340,1,0,0,0,353,
342,1,0,0,0,353,344,1,0,0,0,353,345,1,0,0,0,353,347,1,0,0,0,353,349,1,0,
0,0,353,350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,25,1,0,0,0,355,356,
5,26,0,0,356,357,5,25,0,0,357,27,1,0,0,0,358,359,5,7,0,0,359,361,3,134,67,
0,360,362,5,9,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,365,1,0,0,0,363,366,
3,10,5,0,364,366,3,6,3,0,365,363,1,0,0,0,365,364,1,0,0,0,366,29,1,0,0,0,
367,368,5,33,0,0,368,369,3,12,6,0,369,370,5,32,0,0,370,371,3,134,67,0,371,
372,5,34,0,0,372,375,3,134,67,0,373,374,5,35,0,0,374,376,3,134,67,0,375,
373,1,0,0,0,375,376,1,0,0,0,376,382,1,0,0,0,377,378,3,10,5,0,378,380,5,8,
0,0,379,381,3,12,6,0,380,379,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,
377,1,0,0,0,382,383,1,0,0,0,383,31,1,0,0,0,384,385,5,33,0,0,385,386,3,12,
6,0,386,387,5,32,0,0,387,388,3,134,67,0,388,389,5,34,0,0,389,392,3,134,67,
0,390,391,5,35,0,0,391,393,3,134,67,0,392,390,1,0,0,0,392,393,1,0,0,0,393,
33,1,0,0,0,394,403,5,8,0,0,395,400,3,12,6,0,396,397,5,27,0,0,397,399,3,12,
6,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,
404,1,0,0,0,402,400,1,0,0,0,403,395,1,0,0,0,403,404,1,0,0,0,404,35,1,0,0,
0,405,408,5,36,0,0,406,407,5,118,0,0,407,409,7,1,0,0,408,406,1,0,0,0,408,
409,1,0,0,0,409,410,1,0,0,0,410,411,3,142,71,0,411,37,1,0,0,0,412,413,5,
77,0,0,413,414,3,142,71,0,414,39,1,0,0,0,415,416,5,38,0,0,416,417,3,142,
71,0,417,41,1,0,0,0,418,419,5,5,0,0,419,420,3,6,3,0,420,43,1,0,0,0,421,422,
5,6,0,0,422,423,3,134,67,0,423,45,1,0,0,0,424,425,5,58,0,0,425,426,3,134,
67,0,426,427,5,27,0,0,427,428,3,134,67,0,428,47,1,0,0,0,429,430,5,45,0,0,
430,431,3,144,72,0,431,49,1,0,0,0,432,437,5,47,0,0,433,434,3,134,67,0,434,
435,5,27,0,0,435,436,3,134,67,0,436,438,1,0,0,0,437,433,1,0,0,0,437,438,
1,0,0,0,438,446,1,0,0,0,439,440,5,34,0,0,440,441,3,134,67,0,441,442,5,27,
0,0,442,443,3,134,67,0,443,445,1,0,0,0,444,439,1,0,0,0,445,448,1,0,0,0,446,
444,1,0,0,0,446,447,1,0,0,0,447,51,1,0,0,0,448,446,1,0,0,0,449,454,5,48,
0,0,450,451,3,134,67,0,451,452,5,27,0,0,452,453,3,134,67,0,453,455,1,0,0,
0,454,450,1,0,0,0,454,455,1,0,0,0,455,463,1,0,0,0,456,457,5,34,0,0,457,458,
3,134,67,0,458,459,5,27,0,0,459,460,3,134,67,0,460,462,1,0,0,0,461,456,1,
0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,53,1,0,0,0,465,
463,1,0,0,0,466,467,5,56,0,0,467,468,3,134,67,0,468,469,5,27,0,0,469,470,
3,134,67,0,470,55,1,0,0,0,471,472,5,54,0,0,472,473,3,134,67,0,473,474,5,
5,0,0,474,479,3,6,3,0,475,476,5,27,0,0,476,478,3,6,3,0,477,475,1,0,0,0,478,
481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,57,1,0,0,0,481,479,1,0,0,
0,482,483,5,54,0,0,483,484,3,134,67,0,484,485,5,6,0,0,485,490,3,6,3,0,486,
487,5,27,0,0,487,489,3,6,3,0,488,486,1,0,0,0,489,492,1,0,0,0,490,488,1,0,
0,0,490,491,1,0,0,0,491,59,1,0,0,0,492,490,1,0,0,0,493,494,5,51,0,0,494,
495,3,134,67,0,495,61,1,0,0,0,496,497,5,52,0,0,497,498,3,134,67,0,498,63,
1,0,0,0,499,500,5,61,0,0,500,501,5,40,0,0,501,502,3,134,67,0,502,65,1,0,
0,0,503,504,5,62,0,0,504,505,5,40,0,0,505,506,3,134,67,0,506,67,1,0,0,0,
507,508,5,75,0,0,508,515,3,70,35,0,509,511,5,27,0,0,510,512,3,70,35,0,511,
510,1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,509,1,0,0,0,514,517,1,0,
0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,69,1,0,0,0,517,515,1,0,0,0,518,521,
3,120,60,0,519,521,5,118,0,0,520,518,1,0,0,0,520,519,1,0,0,0,521,71,1,0,
0,0,522,523,5,76,0,0,523,524,3,134,67,0,524,525,5,27,0,0,525,528,3,134,67,
0,526,527,5,27,0,0,527,529,3,134,67,0,528,526,1,0,0,0,528,529,1,0,0,0,529,
73,1,0,0,0,530,531,5,78,0,0,531,537,3,134,67,0,532,533,5,80,0,0,533,534,
3,134,67,0,534,535,5,27,0,0,535,536,3,134,67,0,536,538,1,0,0,0,537,532,1,
0,0,0,537,538,1,0,0,0,538,75,1,0,0,0,539,540,5,79,0,0,540,546,3,134,67,0,
541,542,5,80,0,0,542,543,3,134,67,0,543,544,5,27,0,0,544,545,3,134,67,0,
545,547,1,0,0,0,546,541,1,0,0,0,546,547,1,0,0,0,547,77,1,0,0,0,548,550,5,
81,0,0,549,551,5,82,0,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,
552,553,3,136,68,0,553,554,5,16,0,0,554,555,3,136,68,0,555,556,5,17,0,0,
556,557,5,32,0,0,557,558,3,134,67,0,558,79,1,0,0,0,559,560,5,84,0,0,560,
561,5,16,0,0,561,562,3,134,67,0,562,563,5,17,0,0,563,81,1,0,0,0,564,565,
5,85,0,0,565,566,5,32,0,0,566,567,3,134,67,0,567,83,1,0,0,0,568,569,5,86,
0,0,569,570,5,32,0,0,570,571,3,134,67,0,571,85,1,0,0,0,572,573,5,87,0,0,
573,574,5,32,0,0,574,575,3,134,67,0,575,87,1,0,0,0,576,577,5,88,0,0,577,
578,5,32,0,0,578,579,3,134,67,0,579,89,1,0,0,0,580,581,5,89,0,0,581,582,
5,32,0,0,582,583,3,134,67,0,583,91,1,0,0,0,584,585,5,90,0,0,585,586,3,134,
67,0,586,587,5,27,0,0,587,588,3,134,67,0,588,589,5,80,0,0,589,590,3,134,
67,0,590,93,1,0,0,0,591,592,5,91,0,0,592,593,3,134,67,0,593,594,5,27,0,0,
594,595,3,134,67,0,595,596,5,80,0,0,596,597,3,134,67,0,597,95,1,0,0,0,598,
599,5,66,0,0,599,600,5,5,0,0,600,601,3,6,3,0,601,97,1,0,0,0,602,603,5,49,
0,0,603,604,5,120,0,0,604,99,1,0,0,0,605,606,5,50,0,0,606,607,5,120,0,0,
607,101,1,0,0,0,608,609,5,104,0,0,609,610,3,12,6,0,610,103,1,0,0,0,611,612,
5,105,0,0,612,613,3,12,6,0,613,105,1,0,0,0,614,616,5,28,0,0,615,617,3,134,
67,0,616,615,1,0,0,0,616,617,1,0,0,0,617,107,1,0,0,0,618,623,5,93,0,0,619,
620,3,134,67,0,620,621,5,27,0,0,621,622,3,134,67,0,622,624,1,0,0,0,623,619,
1,0,0,0,623,624,1,0,0,0,624,109,1,0,0,0,625,626,5,108,0,0,626,627,3,134,
67,0,627,111,1,0,0,0,628,629,5,115,0,0,629,630,3,134,67,0,630,113,1,0,0,
0,631,632,5,30,0,0,632,115,1,0,0,0,633,634,5,3,0,0,634,117,1,0,0,0,635,636,
5,111,0,0,636,119,1,0,0,0,637,639,7,2,0,0,638,637,1,0,0,0,638,639,1,0,0,
0,639,640,1,0,0,0,640,641,7,3,0,0,641,121,1,0,0,0,642,678,5,118,0,0,643,
678,3,120,60,0,644,678,3,200,100,0,645,678,3,12,6,0,646,678,3,148,74,0,647,
678,3,146,73,0,648,678,3,150,75,0,649,678,3,174,87,0,650,678,3,152,76,0,
651,678,3,180,90,0,652,678,3,154,77,0,653,678,3,156,78,0,654,678,3,158,79,
0,655,678,3,160,80,0,656,678,3,162,81,0,657,678,3,164,82,0,658,678,3,166,
83,0,659,678,3,168,84,0,660,678,3,170,85,0,661,678,3,178,89,0,662,678,3,
172,86,0,663,678,3,176,88,0,664,678,3,182,91,0,665,678,3,184,92,0,666,678,
3,186,93,0,667,678,3,188,94,0,668,678,3,190,95,0,669,678,3,192,96,0,670,
678,3,194,97,0,671,678,3,196,98,0,672,678,3,198,99,0,673,674,5,16,0,0,674,
675,3,134,67,0,675,676,5,17,0,0,676,678,1,0,0,0,677,642,1,0,0,0,677,643,
1,0,0,0,677,644,1,0,0,0,677,645,1,0,0,0,677,646,1,0,0,0,677,647,1,0,0,0,
677,648,1,0,0,0,677,649,1,0,0,0,677,650,1,0,0,0,677,651,1,0,0,0,677,652,
1,0,0,0,677,653,1,0,0,0,677,654,1,0,0,0,677,655,1,0,0,0,677,656,1,0,0,0,
677,657,1,0,0,0,677,658,1,0,0,0,677,659,1,0,0,0,677,660,1,0,0,0,677,661,
1,0,0,0,677,662,1,0,0,0,677,663,1,0,0,0,677,664,1,0,0,0,677,665,1,0,0,0,
677,666,1,0,0,0,677,667,1,0,0,0,677,668,1,0,0,0,677,669,1,0,0,0,677,670,
1,0,0,0,677,671,1,0,0,0,677,672,1,0,0,0,677,673,1,0,0,0,678,123,1,0,0,0,
679,681,5,110,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,684,
7,2,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,3,122,61,
0,686,125,1,0,0,0,687,692,3,124,62,0,688,689,5,107,0,0,689,691,3,124,62,
0,690,688,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,127,
1,0,0,0,694,692,1,0,0,0,695,700,3,126,63,0,696,697,7,4,0,0,697,699,3,126,
63,0,698,696,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,
129,1,0,0,0,702,700,1,0,0,0,703,708,3,128,64,0,704,705,7,2,0,0,705,707,3,
128,64,0,706,704,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,
709,131,1,0,0,0,710,708,1,0,0,0,711,715,3,130,65,0,712,713,3,24,12,0,713,
714,3,130,65,0,714,716,1,0,0,0,715,712,1,0,0,0,715,716,1,0,0,0,716,133,1,
0,0,0,717,727,3,122,61,0,718,723,3,132,66,0,719,720,7,5,0,0,720,722,3,132,
66,0,721,719,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,
727,1,0,0,0,725,723,1,0,0,0,726,717,1,0,0,0,726,718,1,0,0,0,727,135,1,0,
0,0,728,730,3,138,69,0,729,731,3,140,70,0,730,729,1,0,0,0,730,731,1,0,0,
0,731,137,1,0,0,0,732,736,5,119,0,0,733,735,7,6,0,0,734,733,1,0,0,0,735,
738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,139,1,0,0,0,738,736,1,0,
0,0,739,740,7,7,0,0,740,141,1,0,0,0,741,746,3,12,6,0,742,743,5,27,0,0,743,
745,3,12,6,0,744,742,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,
0,0,747,143,1,0,0,0,748,746,1,0,0,0,749,754,3,134,67,0,750,751,5,27,0,0,
751,753,3,134,67,0,752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,
1,0,0,0,755,145,1,0,0,0,756,754,1,0,0,0,757,758,5,39,0,0,758,759,5,16,0,
0,759,760,3,134,67,0,760,761,5,17,0,0,761,147,1,0,0,0,762,763,5,11,0,0,763,
764,5,16,0,0,764,765,3,134,67,0,765,766,5,17,0,0,766,149,1,0,0,0,767,768,
5,44,0,0,768,769,5,16,0,0,769,770,3,134,67,0,770,771,5,17,0,0,771,151,1,
0,0,0,772,773,5,46,0,0,773,774,5,16,0,0,774,775,3,134,67,0,775,776,5,17,
0,0,776,153,1,0,0,0,777,778,5,12,0,0,778,779,5,16,0,0,779,780,3,134,67,0,
780,781,5,27,0,0,781,782,3,134,67,0,782,783,5,27,0,0,783,784,3,134,67,0,
784,785,5,17,0,0,785,155,1,0,0,0,786,787,5,55,0,0,787,788,5,16,0,0,788,789,
3,134,67,0,789,790,5,17,0,0,790,157,1,0,0,0,791,792,5,57,0,0,792,793,5,16,
0,0,793,794,3,134,67,0,794,795,5,17,0,0,795,159,1,0,0,0,796,797,5,59,0,0,
797,798,5,16,0,0,798,799,3,134,67,0,799,800,5,17,0,0,800,161,1,0,0,0,801,
802,5,67,0,0,802,803,5,16,0,0,803,804,3,134,67,0,804,805,5,17,0,0,805,163,
1,0,0,0,806,807,5,68,0,0,807,808,5,16,0,0,808,809,3,134,67,0,809,810,5,17,
0,0,810,165,1,0,0,0,811,812,5,69,0,0,812,813,5,16,0,0,813,814,3,134,67,0,
814,815,5,17,0,0,815,167,1,0,0,0,816,817,5,70,0,0,817,818,5,16,0,0,818,819,
3,134,67,0,819,820,5,17,0,0,820,169,1,0,0,0,821,822,5,13,0,0,822,823,5,16,
0,0,823,824,3,134,67,0,824,825,5,27,0,0,825,826,3,134,67,0,826,827,5,17,
0,0,827,171,1,0,0,0,828,829,5,14,0,0,829,830,5,16,0,0,830,831,3,134,67,0,
831,832,5,27,0,0,832,833,3,134,67,0,833,834,5,17,0,0,834,173,1,0,0,0,835,
836,5,15,0,0,836,837,5,16,0,0,837,838,3,134,67,0,838,839,5,17,0,0,839,175,
1,0,0,0,840,841,5,82,0,0,841,842,3,136,68,0,842,843,5,16,0,0,843,844,3,134,
67,0,844,845,5,17,0,0,845,177,1,0,0,0,846,847,5,83,0,0,847,848,5,16,0,0,
848,849,3,134,67,0,849,850,5,17,0,0,850,179,1,0,0,0,851,852,5,92,0,0,852,
853,5,16,0,0,853,854,3,134,67,0,854,855,5,27,0,0,855,856,3,134,67,0,856,
857,5,17,0,0,857,181,1,0,0,0,858,859,5,95,0,0,859,860,5,16,0,0,860,861,3,
134,67,0,861,862,5,17,0,0,862,183,1,0,0,0,863,864,5,96,0,0,864,865,5,16,
0,0,865,866,3,134,67,0,866,867,5,17,0,0,867,185,1,0,0,0,868,869,5,97,0,0,
869,870,5,16,0,0,870,871,3,134,67,0,871,872,5,17,0,0,872,187,1,0,0,0,873,
874,5,98,0,0,874,875,5,16,0,0,875,876,3,134,67,0,876,877,5,17,0,0,877,189,
1,0,0,0,878,879,5,99,0,0,879,880,5,16,0,0,880,881,3,134,67,0,881,882,5,17,
0,0,882,191,1,0,0,0,883,884,5,100,0,0,884,885,5,16,0,0,885,886,3,134,67,
0,886,887,5,17,0,0,887,193,1,0,0,0,888,889,5,101,0,0,889,890,5,16,0,0,890,
891,3,134,67,0,891,892,5,17,0,0,892,195,1,0,0,0,893,894,5,102,0,0,894,895,
5,16,0,0,895,896,3,134,67,0,896,897,5,17,0,0,897,197,1,0,0,0,898,899,5,103,
0,0,899,900,5,16,0,0,900,901,3,134,67,0,901,902,5,17,0,0,902,199,1,0,0,0,
903,904,5,84,0,0,904,905,5,16,0,0,905,906,3,134,67,0,906,907,5,17,0,0,907,
201,1,0,0,0,51,205,213,217,222,229,234,301,310,315,320,324,331,353,361,365,
375,380,382,392,400,403,408,437,446,454,463,479,490,511,515,520,528,537,
546,550,616,623,638,677,680,683,692,700,708,715,723,726,730,736,746,754];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class jvmBasicParser extends antlr4.Parser {

    static grammarFileName = "jvmBasic.g4";
    static literalNames = [ null, "'$'", "'%'", "'RETURN'", "'PRINT'", "'GOTO'", 
                            "'GOSUB'", "'IF'", "'NEXT'", "'THEN'", "'REM'", 
                            "'CHR$'", "'MID$'", "'LEFT$'", "'RIGHT$'", "'STR$'", 
                            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'CLEAR'", 
                            "'>: '", "'<: '", "'>'", "'<'", "','", "'LIST'", 
                            "'RUN'", "'END'", "'LET'", "'='", "'FOR'", "'TO'", 
                            "'STEP'", "'INPUT'", "';'", "'DIM'", "'SQR'", 
                            "':'", "'TEXT'", "'HGR'", "'HGR2'", "'LEN'", 
                            "'CALL'", "'ASC'", "'HPLOT'", "'VPLOT'", "'PR#'", 
                            "'IN#'", "'VTAB'", "'HTAB'", "'HOME'", "'ON'", 
                            "'PDL'", "'PLOT'", "'PEEK'", "'POKE'", "'INT'", 
                            "'STOP'", "'HIMEM'", "'LOMEM'", "'FLASH'", "'INVERSE'", 
                            "'NORMAL'", "'ONERR'", "'SPC'", "'FRE'", "'POS'", 
                            "'USR'", "'TRACE'", "'NOTRACE'", "'AND'", "'OR'", 
                            "'DATA'", "'WAIT'", "'READ'", "'XDRAW'", "'DRAW'", 
                            "'AT'", "'DEF'", "'FN'", "'VAL'", "'TAB'", "'SPEED'", 
                            "'ROT'", "'SCALE'", "'COLOR'", "'HCOLOR'", "'HLIN'", 
                            "'VLIN'", "'SCRN'", "'POP'", "'SHLOAD'", "'SIN'", 
                            "'COS'", "'TAN'", "'ATN'", "'RND'", "'SGN'", 
                            "'EXP'", "'LOG'", "'ABS'", "'STORE'", "'RECALL'", 
                            "'GET'", "'^'", "'&'", "'GR'", "'NOT'", "'RESTORE'", 
                            "'SAVE'", "'LOAD'", "'?'", "'INCLUDE'", "'CLS'" ];
    static symbolicNames = [ null, "DOLLAR", "PERCENT", "RETURN", "PRINT", 
                             "GOTO", "GOSUB", "IF", "NEXT", "THEN", "REM", 
                             "CHR", "MID", "LEFT", "RIGHT", "STR", "LPAREN", 
                             "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", 
                             "CLEAR", "GTE", "LTE", "GT", "LT", "COMMA", 
                             "LIST", "RUN", "END", "LET", "EQ", "FOR", "TO", 
                             "STEP", "INPUT", "SEMICOLON", "DIM", "SQR", 
                             "COLON", "TEXT", "HGR", "HGR2", "LEN", "CALL", 
                             "ASC", "HPLOT", "VPLOT", "PRNUMBER", "INNUMBER", 
                             "VTAB", "HTAB", "HOME", "ON", "PDL", "PLOT", 
                             "PEEK", "POKE", "INTF", "STOP", "HIMEM", "LOMEM", 
                             "FLASH", "INVERSE", "NORMAL", "ONERR", "SPC", 
                             "FRE", "POS", "USR", "TRACE", "NOTRACE", "AND", 
                             "OR", "DATA", "WAIT", "READ", "XDRAW", "DRAW", 
                             "AT", "DEF", "FN", "VAL", "TAB", "SPEED", "ROT", 
                             "SCALE", "COLOR", "HCOLOR", "HLIN", "VLIN", 
                             "SCRN", "POP", "SHLOAD", "SIN", "COS", "TAN", 
                             "ATN", "RND", "SGN", "EXP", "LOG", "ABS", "STORE", 
                             "RECALL", "GET", "EXPONENT", "AMPERSAND", "GR", 
                             "NOT", "RESTORE", "SAVE", "LOAD", "QUESTION", 
                             "INCLUDE", "CLS", "COMMENT", "STRINGLITERAL", 
                             "LETTERS", "NUMBER", "FLOAT", "WS" ];
    static ruleNames = [ "prog", "line", "amperoper", "linenumber", "amprstmt", 
                         "statement", "vardecl", "printstmt1", "printlist", 
                         "getstmt", "letstmt", "variableassignment", "relop", 
                         "neq", "ifstmt", "forstmt1", "forstmt2", "nextstmt", 
                         "inputstmt", "readstmt", "dimstmt", "gotostmt", 
                         "gosubstmt", "pokestmt", "callstmt", "hplotstmt", 
                         "vplotstmt", "plotstmt", "ongotostmt", "ongosubstmt", 
                         "vtabstmnt", "htabstmnt", "himemstmt", "lomemstmt", 
                         "datastmt", "datum", "waitstmt", "xdrawstmt", "drawstmt", 
                         "defstmt", "tabstmt", "speedstmt", "rotstmt", "scalestmt", 
                         "colorstmt", "hcolorstmt", "hlinstmt", "vlinstmt", 
                         "onerrstmt", "prstmt", "instmt", "storestmt", "recallstmt", 
                         "liststmt", "popstmt", "amptstmt", "includestmt", 
                         "endstmt", "returnstmt", "restorestmt", "number", 
                         "func_", "signExpression", "exponentExpression", 
                         "multiplyingExpression", "addingExpression", "relationalExpression", 
                         "expression", "var_", "varname", "varsuffix", "varlist", 
                         "exprlist", "sqrfunc", "chrfunc", "lenfunc", "ascfunc", 
                         "midfunc", "pdlfunc", "peekfunc", "intfunc", "spcfunc", 
                         "frefunc", "posfunc", "usrfunc", "leftfunc", "rightfunc", 
                         "strfunc", "fnfunc", "valfunc", "scrnfunc", "sinfunc", 
                         "cosfunc", "tanfunc", "atnfunc", "rndfunc", "sgnfunc", 
                         "expfunc", "logfunc", "absfunc", "tabfunc" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = jvmBasicParser.ruleNames;
        this.literalNames = jvmBasicParser.literalNames;
        this.symbolicNames = jvmBasicParser.symbolicNames;
    }



	prog() {
	    let localctx = new ProgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, jvmBasicParser.RULE_prog);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 202;
	            this.line();
	            this.state = 205; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===120);
	        this.state = 207;
	        this.match(jvmBasicParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	line() {
	    let localctx = new LineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, jvmBasicParser.RULE_line);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this.linenumber();
	        this.state = 222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 210;
	            this.amprstmt();
	            this.state = 217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===40) {
	                this.state = 211;
	                this.match(jvmBasicParser.COLON);
	                this.state = 213;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4030727672) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4206876457) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 939097283) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 49079) !== 0)) {
	                    this.state = 212;
	                    this.amprstmt();
	                }

	                this.state = 219;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 220;
	            this.match(jvmBasicParser.COMMENT);
	            break;

	        case 3:
	            this.state = 221;
	            this.match(jvmBasicParser.REM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amperoper() {
	    let localctx = new AmperoperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, jvmBasicParser.RULE_amperoper);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(jvmBasicParser.AMPERSAND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linenumber() {
	    let localctx = new LinenumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, jvmBasicParser.RULE_linenumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 226;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amprstmt() {
	    let localctx = new AmprstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, jvmBasicParser.RULE_amprstmt);
	    try {
	        this.state = 234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 22:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 36:
	        case 38:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 71:
	        case 72:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 94:
	        case 104:
	        case 105:
	        case 106:
	        case 108:
	        case 109:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 229;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 228;
	                this.amperoper();

	            }
	            this.state = 231;
	            this.statement();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 232;
	            this.match(jvmBasicParser.COMMENT);
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 233;
	            this.match(jvmBasicParser.REM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, jvmBasicParser.RULE_statement);
	    try {
	        this.state = 301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 236;
	            this.match(jvmBasicParser.CLS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 237;
	            this.match(jvmBasicParser.LOAD);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 238;
	            this.match(jvmBasicParser.SAVE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 239;
	            this.match(jvmBasicParser.TRACE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 240;
	            this.match(jvmBasicParser.NOTRACE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 241;
	            this.match(jvmBasicParser.FLASH);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 242;
	            this.match(jvmBasicParser.INVERSE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 243;
	            this.match(jvmBasicParser.GR);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 244;
	            this.match(jvmBasicParser.NORMAL);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 245;
	            this.match(jvmBasicParser.SHLOAD);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 246;
	            this.match(jvmBasicParser.CLEAR);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 247;
	            this.match(jvmBasicParser.RUN);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 248;
	            this.match(jvmBasicParser.STOP);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 249;
	            this.match(jvmBasicParser.TEXT);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 250;
	            this.match(jvmBasicParser.HOME);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 251;
	            this.match(jvmBasicParser.HGR);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 252;
	            this.match(jvmBasicParser.HGR2);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 253;
	            this.endstmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 254;
	            this.returnstmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 255;
	            this.restorestmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 256;
	            this.amptstmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 257;
	            this.popstmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 258;
	            this.liststmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 259;
	            this.storestmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 260;
	            this.getstmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 261;
	            this.recallstmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 262;
	            this.nextstmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 263;
	            this.instmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 264;
	            this.prstmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 265;
	            this.onerrstmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 266;
	            this.hlinstmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 267;
	            this.vlinstmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 268;
	            this.colorstmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 269;
	            this.speedstmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 270;
	            this.scalestmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 271;
	            this.rotstmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 272;
	            this.hcolorstmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 273;
	            this.himemstmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 274;
	            this.lomemstmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 275;
	            this.printstmt1();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 276;
	            this.pokestmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 277;
	            this.plotstmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 278;
	            this.ongotostmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 279;
	            this.ongosubstmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 280;
	            this.ifstmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 281;
	            this.forstmt1();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 282;
	            this.forstmt2();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 283;
	            this.inputstmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 284;
	            this.tabstmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 285;
	            this.dimstmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 286;
	            this.gotostmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 287;
	            this.gosubstmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 288;
	            this.callstmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 289;
	            this.readstmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 290;
	            this.hplotstmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 291;
	            this.vplotstmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 292;
	            this.vtabstmnt();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 293;
	            this.htabstmnt();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 294;
	            this.waitstmt();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 295;
	            this.datastmt();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 296;
	            this.xdrawstmt();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 297;
	            this.drawstmt();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 298;
	            this.defstmt();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 299;
	            this.letstmt();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 300;
	            this.includestmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vardecl() {
	    let localctx = new VardeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, jvmBasicParser.RULE_vardecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.var_();
	        this.state = 310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 304;
	            this.match(jvmBasicParser.LPAREN);
	            this.state = 305;
	            this.exprlist();
	            this.state = 306;
	            this.match(jvmBasicParser.RPAREN);
	            this.state = 312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printstmt1() {
	    let localctx = new Printstmt1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, jvmBasicParser.RULE_printstmt1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        _la = this._input.LA(1);
	        if(!(_la===4 || _la===114)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 314;
	            this.printlist();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printlist() {
	    let localctx = new PrintlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, jvmBasicParser.RULE_printlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.expression();
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27 || _la===37) {
	            this.state = 318;
	            _la = this._input.LA(1);
	            if(!(_la===27 || _la===37)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 320;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            if(la_===1) {
	                this.state = 319;
	                this.expression();

	            }
	            this.state = 326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getstmt() {
	    let localctx = new GetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, jvmBasicParser.RULE_getstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        this.match(jvmBasicParser.GET);
	        this.state = 328;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letstmt() {
	    let localctx = new LetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, jvmBasicParser.RULE_letstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 330;
	            this.match(jvmBasicParser.LET);
	        }

	        this.state = 333;
	        this.variableassignment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableassignment() {
	    let localctx = new VariableassignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, jvmBasicParser.RULE_variableassignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 335;
	        this.vardecl();
	        this.state = 336;
	        this.match(jvmBasicParser.EQ);
	        this.state = 337;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relop() {
	    let localctx = new RelopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, jvmBasicParser.RULE_relop);
	    try {
	        this.state = 353;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 339;
	            this.match(jvmBasicParser.GTE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 340;
	            this.match(jvmBasicParser.GT);
	            this.state = 341;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 342;
	            this.match(jvmBasicParser.EQ);
	            this.state = 343;
	            this.match(jvmBasicParser.GT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 344;
	            this.match(jvmBasicParser.LTE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 345;
	            this.match(jvmBasicParser.LT);
	            this.state = 346;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 347;
	            this.match(jvmBasicParser.EQ);
	            this.state = 348;
	            this.match(jvmBasicParser.LT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 349;
	            this.neq();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 350;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 351;
	            this.match(jvmBasicParser.GT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 352;
	            this.match(jvmBasicParser.LT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	neq() {
	    let localctx = new NeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, jvmBasicParser.RULE_neq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.match(jvmBasicParser.LT);
	        this.state = 356;
	        this.match(jvmBasicParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifstmt() {
	    let localctx = new IfstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, jvmBasicParser.RULE_ifstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        this.match(jvmBasicParser.IF);
	        this.state = 359;
	        this.expression();
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 360;
	            this.match(jvmBasicParser.THEN);
	        }

	        this.state = 365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 22:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 36:
	        case 38:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 71:
	        case 72:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 94:
	        case 104:
	        case 105:
	        case 106:
	        case 108:
	        case 109:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 119:
	            this.state = 363;
	            this.statement();
	            break;
	        case 120:
	            this.state = 364;
	            this.linenumber();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forstmt1() {
	    let localctx = new Forstmt1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, jvmBasicParser.RULE_forstmt1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.match(jvmBasicParser.FOR);
	        this.state = 368;
	        this.vardecl();
	        this.state = 369;
	        this.match(jvmBasicParser.EQ);
	        this.state = 370;
	        this.expression();
	        this.state = 371;
	        this.match(jvmBasicParser.TO);
	        this.state = 372;
	        this.expression();
	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 373;
	            this.match(jvmBasicParser.STEP);
	            this.state = 374;
	            this.expression();
	        }

	        this.state = 382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 377;
	            this.statement();
	            this.state = 378;
	            this.match(jvmBasicParser.NEXT);
	            this.state = 380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===119) {
	                this.state = 379;
	                this.vardecl();
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forstmt2() {
	    let localctx = new Forstmt2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, jvmBasicParser.RULE_forstmt2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this.match(jvmBasicParser.FOR);
	        this.state = 385;
	        this.vardecl();
	        this.state = 386;
	        this.match(jvmBasicParser.EQ);
	        this.state = 387;
	        this.expression();
	        this.state = 388;
	        this.match(jvmBasicParser.TO);
	        this.state = 389;
	        this.expression();
	        this.state = 392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 390;
	            this.match(jvmBasicParser.STEP);
	            this.state = 391;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextstmt() {
	    let localctx = new NextstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, jvmBasicParser.RULE_nextstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.match(jvmBasicParser.NEXT);
	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 395;
	            this.vardecl();
	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 396;
	                this.match(jvmBasicParser.COMMA);
	                this.state = 397;
	                this.vardecl();
	                this.state = 402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputstmt() {
	    let localctx = new InputstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, jvmBasicParser.RULE_inputstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 405;
	        this.match(jvmBasicParser.INPUT);
	        this.state = 408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 406;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            this.state = 407;
	            _la = this._input.LA(1);
	            if(!(_la===27 || _la===37)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 410;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readstmt() {
	    let localctx = new ReadstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, jvmBasicParser.RULE_readstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(jvmBasicParser.READ);
	        this.state = 413;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimstmt() {
	    let localctx = new DimstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, jvmBasicParser.RULE_dimstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        this.match(jvmBasicParser.DIM);
	        this.state = 416;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotostmt() {
	    let localctx = new GotostmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, jvmBasicParser.RULE_gotostmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 419;
	        this.linenumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gosubstmt() {
	    let localctx = new GosubstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, jvmBasicParser.RULE_gosubstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.match(jvmBasicParser.GOSUB);
	        this.state = 422;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pokestmt() {
	    let localctx = new PokestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, jvmBasicParser.RULE_pokestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.match(jvmBasicParser.POKE);
	        this.state = 425;
	        this.expression();
	        this.state = 426;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 427;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callstmt() {
	    let localctx = new CallstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, jvmBasicParser.RULE_callstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(jvmBasicParser.CALL);
	        this.state = 430;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hplotstmt() {
	    let localctx = new HplotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, jvmBasicParser.RULE_hplotstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(jvmBasicParser.HPLOT);
	        this.state = 437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 433;
	            this.expression();
	            this.state = 434;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 435;
	            this.expression();

	        }
	        this.state = 446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 439;
	            this.match(jvmBasicParser.TO);
	            this.state = 440;
	            this.expression();
	            this.state = 441;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 442;
	            this.expression();
	            this.state = 448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vplotstmt() {
	    let localctx = new VplotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, jvmBasicParser.RULE_vplotstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(jvmBasicParser.VPLOT);
	        this.state = 454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 450;
	            this.expression();
	            this.state = 451;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 452;
	            this.expression();

	        }
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 456;
	            this.match(jvmBasicParser.TO);
	            this.state = 457;
	            this.expression();
	            this.state = 458;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 459;
	            this.expression();
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plotstmt() {
	    let localctx = new PlotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, jvmBasicParser.RULE_plotstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.match(jvmBasicParser.PLOT);
	        this.state = 467;
	        this.expression();
	        this.state = 468;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 469;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ongotostmt() {
	    let localctx = new OngotostmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, jvmBasicParser.RULE_ongotostmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(jvmBasicParser.ON);
	        this.state = 472;
	        this.expression();
	        this.state = 473;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 474;
	        this.linenumber();
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 475;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 476;
	            this.linenumber();
	            this.state = 481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ongosubstmt() {
	    let localctx = new OngosubstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, jvmBasicParser.RULE_ongosubstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.match(jvmBasicParser.ON);
	        this.state = 483;
	        this.expression();
	        this.state = 484;
	        this.match(jvmBasicParser.GOSUB);
	        this.state = 485;
	        this.linenumber();
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 486;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 487;
	            this.linenumber();
	            this.state = 492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vtabstmnt() {
	    let localctx = new VtabstmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, jvmBasicParser.RULE_vtabstmnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(jvmBasicParser.VTAB);
	        this.state = 494;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	htabstmnt() {
	    let localctx = new HtabstmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, jvmBasicParser.RULE_htabstmnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(jvmBasicParser.HTAB);
	        this.state = 497;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	himemstmt() {
	    let localctx = new HimemstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, jvmBasicParser.RULE_himemstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.match(jvmBasicParser.HIMEM);
	        this.state = 500;
	        this.match(jvmBasicParser.COLON);
	        this.state = 501;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lomemstmt() {
	    let localctx = new LomemstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, jvmBasicParser.RULE_lomemstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(jvmBasicParser.LOMEM);
	        this.state = 504;
	        this.match(jvmBasicParser.COLON);
	        this.state = 505;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datastmt() {
	    let localctx = new DatastmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, jvmBasicParser.RULE_datastmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(jvmBasicParser.DATA);
	        this.state = 508;
	        this.datum();
	        this.state = 515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 509;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 511;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            if(la_===1) {
	                this.state = 510;
	                this.datum();

	            }
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datum() {
	    let localctx = new DatumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, jvmBasicParser.RULE_datum);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	        case 19:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 518;
	            this.number();
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	waitstmt() {
	    let localctx = new WaitstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, jvmBasicParser.RULE_waitstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(jvmBasicParser.WAIT);
	        this.state = 523;
	        this.expression();
	        this.state = 524;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 525;
	        this.expression();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 526;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 527;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xdrawstmt() {
	    let localctx = new XdrawstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, jvmBasicParser.RULE_xdrawstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this.match(jvmBasicParser.XDRAW);
	        this.state = 531;
	        this.expression();
	        this.state = 537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 532;
	            this.match(jvmBasicParser.AT);
	            this.state = 533;
	            this.expression();
	            this.state = 534;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 535;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawstmt() {
	    let localctx = new DrawstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, jvmBasicParser.RULE_drawstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.match(jvmBasicParser.DRAW);
	        this.state = 540;
	        this.expression();
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 541;
	            this.match(jvmBasicParser.AT);
	            this.state = 542;
	            this.expression();
	            this.state = 543;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 544;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defstmt() {
	    let localctx = new DefstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, jvmBasicParser.RULE_defstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.match(jvmBasicParser.DEF);
	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 549;
	            this.match(jvmBasicParser.FN);
	        }

	        this.state = 552;
	        this.var_();
	        this.state = 553;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 554;
	        this.var_();
	        this.state = 555;
	        this.match(jvmBasicParser.RPAREN);
	        this.state = 556;
	        this.match(jvmBasicParser.EQ);
	        this.state = 557;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabstmt() {
	    let localctx = new TabstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, jvmBasicParser.RULE_tabstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.match(jvmBasicParser.TAB);
	        this.state = 560;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 561;
	        this.expression();
	        this.state = 562;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	speedstmt() {
	    let localctx = new SpeedstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, jvmBasicParser.RULE_speedstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.match(jvmBasicParser.SPEED);
	        this.state = 565;
	        this.match(jvmBasicParser.EQ);
	        this.state = 566;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rotstmt() {
	    let localctx = new RotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, jvmBasicParser.RULE_rotstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this.match(jvmBasicParser.ROT);
	        this.state = 569;
	        this.match(jvmBasicParser.EQ);
	        this.state = 570;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalestmt() {
	    let localctx = new ScalestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, jvmBasicParser.RULE_scalestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.match(jvmBasicParser.SCALE);
	        this.state = 573;
	        this.match(jvmBasicParser.EQ);
	        this.state = 574;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colorstmt() {
	    let localctx = new ColorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, jvmBasicParser.RULE_colorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        this.match(jvmBasicParser.COLOR);
	        this.state = 577;
	        this.match(jvmBasicParser.EQ);
	        this.state = 578;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hcolorstmt() {
	    let localctx = new HcolorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, jvmBasicParser.RULE_hcolorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.match(jvmBasicParser.HCOLOR);
	        this.state = 581;
	        this.match(jvmBasicParser.EQ);
	        this.state = 582;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hlinstmt() {
	    let localctx = new HlinstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, jvmBasicParser.RULE_hlinstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(jvmBasicParser.HLIN);
	        this.state = 585;
	        this.expression();
	        this.state = 586;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 587;
	        this.expression();
	        this.state = 588;
	        this.match(jvmBasicParser.AT);
	        this.state = 589;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vlinstmt() {
	    let localctx = new VlinstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, jvmBasicParser.RULE_vlinstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(jvmBasicParser.VLIN);
	        this.state = 592;
	        this.expression();
	        this.state = 593;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 594;
	        this.expression();
	        this.state = 595;
	        this.match(jvmBasicParser.AT);
	        this.state = 596;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onerrstmt() {
	    let localctx = new OnerrstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, jvmBasicParser.RULE_onerrstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(jvmBasicParser.ONERR);
	        this.state = 599;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 600;
	        this.linenumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prstmt() {
	    let localctx = new PrstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, jvmBasicParser.RULE_prstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(jvmBasicParser.PRNUMBER);
	        this.state = 603;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instmt() {
	    let localctx = new InstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, jvmBasicParser.RULE_instmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.match(jvmBasicParser.INNUMBER);
	        this.state = 606;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storestmt() {
	    let localctx = new StorestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, jvmBasicParser.RULE_storestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(jvmBasicParser.STORE);
	        this.state = 609;
	        this.vardecl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recallstmt() {
	    let localctx = new RecallstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, jvmBasicParser.RULE_recallstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        this.match(jvmBasicParser.RECALL);
	        this.state = 612;
	        this.vardecl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	liststmt() {
	    let localctx = new ListstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, jvmBasicParser.RULE_liststmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(jvmBasicParser.LIST);
	        this.state = 616;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 615;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	popstmt() {
	    let localctx = new PopstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, jvmBasicParser.RULE_popstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.match(jvmBasicParser.POP);
	        this.state = 623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 619;
	            this.expression();
	            this.state = 620;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 621;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amptstmt() {
	    let localctx = new AmptstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, jvmBasicParser.RULE_amptstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(jvmBasicParser.AMPERSAND);
	        this.state = 626;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includestmt() {
	    let localctx = new IncludestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, jvmBasicParser.RULE_includestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(jvmBasicParser.INCLUDE);
	        this.state = 629;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endstmt() {
	    let localctx = new EndstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, jvmBasicParser.RULE_endstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(jvmBasicParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnstmt() {
	    let localctx = new ReturnstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, jvmBasicParser.RULE_returnstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(jvmBasicParser.RETURN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restorestmt() {
	    let localctx = new RestorestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, jvmBasicParser.RULE_restorestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this.match(jvmBasicParser.RESTORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, jvmBasicParser.RULE_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===19) {
	            this.state = 637;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===19)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 640;
	        _la = this._input.LA(1);
	        if(!(_la===120 || _la===121)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_() {
	    let localctx = new Func_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, jvmBasicParser.RULE_func_);
	    try {
	        this.state = 677;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 642;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            break;
	        case 18:
	        case 19:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 643;
	            this.number();
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 644;
	            this.tabfunc();
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 645;
	            this.vardecl();
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 646;
	            this.chrfunc();
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 647;
	            this.sqrfunc();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 648;
	            this.lenfunc();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 649;
	            this.strfunc();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 650;
	            this.ascfunc();
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 651;
	            this.scrnfunc();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 652;
	            this.midfunc();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 653;
	            this.pdlfunc();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 654;
	            this.peekfunc();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 655;
	            this.intfunc();
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 656;
	            this.spcfunc();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 657;
	            this.frefunc();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 658;
	            this.posfunc();
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 659;
	            this.usrfunc();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 660;
	            this.leftfunc();
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 661;
	            this.valfunc();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 662;
	            this.rightfunc();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 663;
	            this.fnfunc();
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 664;
	            this.sinfunc();
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 665;
	            this.cosfunc();
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 666;
	            this.tanfunc();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 667;
	            this.atnfunc();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 668;
	            this.rndfunc();
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 669;
	            this.sgnfunc();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 670;
	            this.expfunc();
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 671;
	            this.logfunc();
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 672;
	            this.absfunc();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 673;
	            this.match(jvmBasicParser.LPAREN);
	            this.state = 674;
	            this.expression();
	            this.state = 675;
	            this.match(jvmBasicParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signExpression() {
	    let localctx = new SignExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, jvmBasicParser.RULE_signExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 679;
	            this.match(jvmBasicParser.NOT);
	        }

	        this.state = 683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 682;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===19)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 685;
	        this.func_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentExpression() {
	    let localctx = new ExponentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, jvmBasicParser.RULE_exponentExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        this.signExpression();
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===107) {
	            this.state = 688;
	            this.match(jvmBasicParser.EXPONENT);
	            this.state = 689;
	            this.signExpression();
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyingExpression() {
	    let localctx = new MultiplyingExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, jvmBasicParser.RULE_multiplyingExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this.exponentExpression();
	        this.state = 700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===20 || _la===21) {
	            this.state = 696;
	            _la = this._input.LA(1);
	            if(!(_la===20 || _la===21)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 697;
	            this.exponentExpression();
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addingExpression() {
	    let localctx = new AddingExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, jvmBasicParser.RULE_addingExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.multiplyingExpression();
	        this.state = 708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===19) {
	            this.state = 704;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===19)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 705;
	            this.multiplyingExpression();
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, jvmBasicParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.addingExpression();
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 23)) & ~0x1f) === 0 && ((1 << (_la - 23)) & 527) !== 0)) {
	            this.state = 712;
	            this.relop();
	            this.state = 713;
	            this.addingExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, jvmBasicParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 717;
	            this.func_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 718;
	            this.relationalExpression();
	            this.state = 723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===73 || _la===74) {
	                this.state = 719;
	                _la = this._input.LA(1);
	                if(!(_la===73 || _la===74)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 720;
	                this.relationalExpression();
	                this.state = 725;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new Var_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, jvmBasicParser.RULE_var_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.varname();
	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1 || _la===2) {
	            this.state = 729;
	            this.varsuffix();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varname() {
	    let localctx = new VarnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, jvmBasicParser.RULE_varname);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.match(jvmBasicParser.LETTERS);
	        this.state = 736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 733;
	                _la = this._input.LA(1);
	                if(!(_la===119 || _la===120)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varsuffix() {
	    let localctx = new VarsuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, jvmBasicParser.RULE_varsuffix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varlist() {
	    let localctx = new VarlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, jvmBasicParser.RULE_varlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.vardecl();
	        this.state = 746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 742;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 743;
	            this.vardecl();
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprlist() {
	    let localctx = new ExprlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, jvmBasicParser.RULE_exprlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.expression();
	        this.state = 754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 750;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 751;
	            this.expression();
	            this.state = 756;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqrfunc() {
	    let localctx = new SqrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, jvmBasicParser.RULE_sqrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(jvmBasicParser.SQR);
	        this.state = 758;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 759;
	        this.expression();
	        this.state = 760;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chrfunc() {
	    let localctx = new ChrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, jvmBasicParser.RULE_chrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(jvmBasicParser.CHR);
	        this.state = 763;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 764;
	        this.expression();
	        this.state = 765;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lenfunc() {
	    let localctx = new LenfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, jvmBasicParser.RULE_lenfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.match(jvmBasicParser.LEN);
	        this.state = 768;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 769;
	        this.expression();
	        this.state = 770;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ascfunc() {
	    let localctx = new AscfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, jvmBasicParser.RULE_ascfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this.match(jvmBasicParser.ASC);
	        this.state = 773;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 774;
	        this.expression();
	        this.state = 775;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midfunc() {
	    let localctx = new MidfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, jvmBasicParser.RULE_midfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 777;
	        this.match(jvmBasicParser.MID);
	        this.state = 778;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 779;
	        this.expression();
	        this.state = 780;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 781;
	        this.expression();
	        this.state = 782;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 783;
	        this.expression();
	        this.state = 784;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pdlfunc() {
	    let localctx = new PdlfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, jvmBasicParser.RULE_pdlfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        this.match(jvmBasicParser.PDL);
	        this.state = 787;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 788;
	        this.expression();
	        this.state = 789;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	peekfunc() {
	    let localctx = new PeekfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, jvmBasicParser.RULE_peekfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.match(jvmBasicParser.PEEK);
	        this.state = 792;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 793;
	        this.expression();
	        this.state = 794;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intfunc() {
	    let localctx = new IntfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, jvmBasicParser.RULE_intfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(jvmBasicParser.INTF);
	        this.state = 797;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 798;
	        this.expression();
	        this.state = 799;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spcfunc() {
	    let localctx = new SpcfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, jvmBasicParser.RULE_spcfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        this.match(jvmBasicParser.SPC);
	        this.state = 802;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 803;
	        this.expression();
	        this.state = 804;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frefunc() {
	    let localctx = new FrefuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, jvmBasicParser.RULE_frefunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 806;
	        this.match(jvmBasicParser.FRE);
	        this.state = 807;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 808;
	        this.expression();
	        this.state = 809;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	posfunc() {
	    let localctx = new PosfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, jvmBasicParser.RULE_posfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.match(jvmBasicParser.POS);
	        this.state = 812;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 813;
	        this.expression();
	        this.state = 814;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usrfunc() {
	    let localctx = new UsrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, jvmBasicParser.RULE_usrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.match(jvmBasicParser.USR);
	        this.state = 817;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 818;
	        this.expression();
	        this.state = 819;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftfunc() {
	    let localctx = new LeftfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, jvmBasicParser.RULE_leftfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.match(jvmBasicParser.LEFT);
	        this.state = 822;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 823;
	        this.expression();
	        this.state = 824;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 825;
	        this.expression();
	        this.state = 826;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rightfunc() {
	    let localctx = new RightfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, jvmBasicParser.RULE_rightfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(jvmBasicParser.RIGHT);
	        this.state = 829;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 830;
	        this.expression();
	        this.state = 831;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 832;
	        this.expression();
	        this.state = 833;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strfunc() {
	    let localctx = new StrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, jvmBasicParser.RULE_strfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 835;
	        this.match(jvmBasicParser.STR);
	        this.state = 836;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 837;
	        this.expression();
	        this.state = 838;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fnfunc() {
	    let localctx = new FnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, jvmBasicParser.RULE_fnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.match(jvmBasicParser.FN);
	        this.state = 841;
	        this.var_();
	        this.state = 842;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 843;
	        this.expression();
	        this.state = 844;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valfunc() {
	    let localctx = new ValfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, jvmBasicParser.RULE_valfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(jvmBasicParser.VAL);
	        this.state = 847;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 848;
	        this.expression();
	        this.state = 849;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrnfunc() {
	    let localctx = new ScrnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, jvmBasicParser.RULE_scrnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(jvmBasicParser.SCRN);
	        this.state = 852;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 853;
	        this.expression();
	        this.state = 854;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 855;
	        this.expression();
	        this.state = 856;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sinfunc() {
	    let localctx = new SinfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, jvmBasicParser.RULE_sinfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(jvmBasicParser.SIN);
	        this.state = 859;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 860;
	        this.expression();
	        this.state = 861;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosfunc() {
	    let localctx = new CosfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, jvmBasicParser.RULE_cosfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.match(jvmBasicParser.COS);
	        this.state = 864;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 865;
	        this.expression();
	        this.state = 866;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tanfunc() {
	    let localctx = new TanfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, jvmBasicParser.RULE_tanfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 868;
	        this.match(jvmBasicParser.TAN);
	        this.state = 869;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 870;
	        this.expression();
	        this.state = 871;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atnfunc() {
	    let localctx = new AtnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, jvmBasicParser.RULE_atnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873;
	        this.match(jvmBasicParser.ATN);
	        this.state = 874;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 875;
	        this.expression();
	        this.state = 876;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rndfunc() {
	    let localctx = new RndfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, jvmBasicParser.RULE_rndfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.match(jvmBasicParser.RND);
	        this.state = 879;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 880;
	        this.expression();
	        this.state = 881;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sgnfunc() {
	    let localctx = new SgnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, jvmBasicParser.RULE_sgnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this.match(jvmBasicParser.SGN);
	        this.state = 884;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 885;
	        this.expression();
	        this.state = 886;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expfunc() {
	    let localctx = new ExpfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, jvmBasicParser.RULE_expfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(jvmBasicParser.EXP);
	        this.state = 889;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 890;
	        this.expression();
	        this.state = 891;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfunc() {
	    let localctx = new LogfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, jvmBasicParser.RULE_logfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 893;
	        this.match(jvmBasicParser.LOG);
	        this.state = 894;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 895;
	        this.expression();
	        this.state = 896;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absfunc() {
	    let localctx = new AbsfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, jvmBasicParser.RULE_absfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 898;
	        this.match(jvmBasicParser.ABS);
	        this.state = 899;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 900;
	        this.expression();
	        this.state = 901;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabfunc() {
	    let localctx = new TabfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, jvmBasicParser.RULE_tabfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(jvmBasicParser.TAB);
	        this.state = 904;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 905;
	        this.expression();
	        this.state = 906;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

jvmBasicParser.EOF = antlr4.Token.EOF;
jvmBasicParser.DOLLAR = 1;
jvmBasicParser.PERCENT = 2;
jvmBasicParser.RETURN = 3;
jvmBasicParser.PRINT = 4;
jvmBasicParser.GOTO = 5;
jvmBasicParser.GOSUB = 6;
jvmBasicParser.IF = 7;
jvmBasicParser.NEXT = 8;
jvmBasicParser.THEN = 9;
jvmBasicParser.REM = 10;
jvmBasicParser.CHR = 11;
jvmBasicParser.MID = 12;
jvmBasicParser.LEFT = 13;
jvmBasicParser.RIGHT = 14;
jvmBasicParser.STR = 15;
jvmBasicParser.LPAREN = 16;
jvmBasicParser.RPAREN = 17;
jvmBasicParser.PLUS = 18;
jvmBasicParser.MINUS = 19;
jvmBasicParser.TIMES = 20;
jvmBasicParser.DIV = 21;
jvmBasicParser.CLEAR = 22;
jvmBasicParser.GTE = 23;
jvmBasicParser.LTE = 24;
jvmBasicParser.GT = 25;
jvmBasicParser.LT = 26;
jvmBasicParser.COMMA = 27;
jvmBasicParser.LIST = 28;
jvmBasicParser.RUN = 29;
jvmBasicParser.END = 30;
jvmBasicParser.LET = 31;
jvmBasicParser.EQ = 32;
jvmBasicParser.FOR = 33;
jvmBasicParser.TO = 34;
jvmBasicParser.STEP = 35;
jvmBasicParser.INPUT = 36;
jvmBasicParser.SEMICOLON = 37;
jvmBasicParser.DIM = 38;
jvmBasicParser.SQR = 39;
jvmBasicParser.COLON = 40;
jvmBasicParser.TEXT = 41;
jvmBasicParser.HGR = 42;
jvmBasicParser.HGR2 = 43;
jvmBasicParser.LEN = 44;
jvmBasicParser.CALL = 45;
jvmBasicParser.ASC = 46;
jvmBasicParser.HPLOT = 47;
jvmBasicParser.VPLOT = 48;
jvmBasicParser.PRNUMBER = 49;
jvmBasicParser.INNUMBER = 50;
jvmBasicParser.VTAB = 51;
jvmBasicParser.HTAB = 52;
jvmBasicParser.HOME = 53;
jvmBasicParser.ON = 54;
jvmBasicParser.PDL = 55;
jvmBasicParser.PLOT = 56;
jvmBasicParser.PEEK = 57;
jvmBasicParser.POKE = 58;
jvmBasicParser.INTF = 59;
jvmBasicParser.STOP = 60;
jvmBasicParser.HIMEM = 61;
jvmBasicParser.LOMEM = 62;
jvmBasicParser.FLASH = 63;
jvmBasicParser.INVERSE = 64;
jvmBasicParser.NORMAL = 65;
jvmBasicParser.ONERR = 66;
jvmBasicParser.SPC = 67;
jvmBasicParser.FRE = 68;
jvmBasicParser.POS = 69;
jvmBasicParser.USR = 70;
jvmBasicParser.TRACE = 71;
jvmBasicParser.NOTRACE = 72;
jvmBasicParser.AND = 73;
jvmBasicParser.OR = 74;
jvmBasicParser.DATA = 75;
jvmBasicParser.WAIT = 76;
jvmBasicParser.READ = 77;
jvmBasicParser.XDRAW = 78;
jvmBasicParser.DRAW = 79;
jvmBasicParser.AT = 80;
jvmBasicParser.DEF = 81;
jvmBasicParser.FN = 82;
jvmBasicParser.VAL = 83;
jvmBasicParser.TAB = 84;
jvmBasicParser.SPEED = 85;
jvmBasicParser.ROT = 86;
jvmBasicParser.SCALE = 87;
jvmBasicParser.COLOR = 88;
jvmBasicParser.HCOLOR = 89;
jvmBasicParser.HLIN = 90;
jvmBasicParser.VLIN = 91;
jvmBasicParser.SCRN = 92;
jvmBasicParser.POP = 93;
jvmBasicParser.SHLOAD = 94;
jvmBasicParser.SIN = 95;
jvmBasicParser.COS = 96;
jvmBasicParser.TAN = 97;
jvmBasicParser.ATN = 98;
jvmBasicParser.RND = 99;
jvmBasicParser.SGN = 100;
jvmBasicParser.EXP = 101;
jvmBasicParser.LOG = 102;
jvmBasicParser.ABS = 103;
jvmBasicParser.STORE = 104;
jvmBasicParser.RECALL = 105;
jvmBasicParser.GET = 106;
jvmBasicParser.EXPONENT = 107;
jvmBasicParser.AMPERSAND = 108;
jvmBasicParser.GR = 109;
jvmBasicParser.NOT = 110;
jvmBasicParser.RESTORE = 111;
jvmBasicParser.SAVE = 112;
jvmBasicParser.LOAD = 113;
jvmBasicParser.QUESTION = 114;
jvmBasicParser.INCLUDE = 115;
jvmBasicParser.CLS = 116;
jvmBasicParser.COMMENT = 117;
jvmBasicParser.STRINGLITERAL = 118;
jvmBasicParser.LETTERS = 119;
jvmBasicParser.NUMBER = 120;
jvmBasicParser.FLOAT = 121;
jvmBasicParser.WS = 122;

jvmBasicParser.RULE_prog = 0;
jvmBasicParser.RULE_line = 1;
jvmBasicParser.RULE_amperoper = 2;
jvmBasicParser.RULE_linenumber = 3;
jvmBasicParser.RULE_amprstmt = 4;
jvmBasicParser.RULE_statement = 5;
jvmBasicParser.RULE_vardecl = 6;
jvmBasicParser.RULE_printstmt1 = 7;
jvmBasicParser.RULE_printlist = 8;
jvmBasicParser.RULE_getstmt = 9;
jvmBasicParser.RULE_letstmt = 10;
jvmBasicParser.RULE_variableassignment = 11;
jvmBasicParser.RULE_relop = 12;
jvmBasicParser.RULE_neq = 13;
jvmBasicParser.RULE_ifstmt = 14;
jvmBasicParser.RULE_forstmt1 = 15;
jvmBasicParser.RULE_forstmt2 = 16;
jvmBasicParser.RULE_nextstmt = 17;
jvmBasicParser.RULE_inputstmt = 18;
jvmBasicParser.RULE_readstmt = 19;
jvmBasicParser.RULE_dimstmt = 20;
jvmBasicParser.RULE_gotostmt = 21;
jvmBasicParser.RULE_gosubstmt = 22;
jvmBasicParser.RULE_pokestmt = 23;
jvmBasicParser.RULE_callstmt = 24;
jvmBasicParser.RULE_hplotstmt = 25;
jvmBasicParser.RULE_vplotstmt = 26;
jvmBasicParser.RULE_plotstmt = 27;
jvmBasicParser.RULE_ongotostmt = 28;
jvmBasicParser.RULE_ongosubstmt = 29;
jvmBasicParser.RULE_vtabstmnt = 30;
jvmBasicParser.RULE_htabstmnt = 31;
jvmBasicParser.RULE_himemstmt = 32;
jvmBasicParser.RULE_lomemstmt = 33;
jvmBasicParser.RULE_datastmt = 34;
jvmBasicParser.RULE_datum = 35;
jvmBasicParser.RULE_waitstmt = 36;
jvmBasicParser.RULE_xdrawstmt = 37;
jvmBasicParser.RULE_drawstmt = 38;
jvmBasicParser.RULE_defstmt = 39;
jvmBasicParser.RULE_tabstmt = 40;
jvmBasicParser.RULE_speedstmt = 41;
jvmBasicParser.RULE_rotstmt = 42;
jvmBasicParser.RULE_scalestmt = 43;
jvmBasicParser.RULE_colorstmt = 44;
jvmBasicParser.RULE_hcolorstmt = 45;
jvmBasicParser.RULE_hlinstmt = 46;
jvmBasicParser.RULE_vlinstmt = 47;
jvmBasicParser.RULE_onerrstmt = 48;
jvmBasicParser.RULE_prstmt = 49;
jvmBasicParser.RULE_instmt = 50;
jvmBasicParser.RULE_storestmt = 51;
jvmBasicParser.RULE_recallstmt = 52;
jvmBasicParser.RULE_liststmt = 53;
jvmBasicParser.RULE_popstmt = 54;
jvmBasicParser.RULE_amptstmt = 55;
jvmBasicParser.RULE_includestmt = 56;
jvmBasicParser.RULE_endstmt = 57;
jvmBasicParser.RULE_returnstmt = 58;
jvmBasicParser.RULE_restorestmt = 59;
jvmBasicParser.RULE_number = 60;
jvmBasicParser.RULE_func_ = 61;
jvmBasicParser.RULE_signExpression = 62;
jvmBasicParser.RULE_exponentExpression = 63;
jvmBasicParser.RULE_multiplyingExpression = 64;
jvmBasicParser.RULE_addingExpression = 65;
jvmBasicParser.RULE_relationalExpression = 66;
jvmBasicParser.RULE_expression = 67;
jvmBasicParser.RULE_var_ = 68;
jvmBasicParser.RULE_varname = 69;
jvmBasicParser.RULE_varsuffix = 70;
jvmBasicParser.RULE_varlist = 71;
jvmBasicParser.RULE_exprlist = 72;
jvmBasicParser.RULE_sqrfunc = 73;
jvmBasicParser.RULE_chrfunc = 74;
jvmBasicParser.RULE_lenfunc = 75;
jvmBasicParser.RULE_ascfunc = 76;
jvmBasicParser.RULE_midfunc = 77;
jvmBasicParser.RULE_pdlfunc = 78;
jvmBasicParser.RULE_peekfunc = 79;
jvmBasicParser.RULE_intfunc = 80;
jvmBasicParser.RULE_spcfunc = 81;
jvmBasicParser.RULE_frefunc = 82;
jvmBasicParser.RULE_posfunc = 83;
jvmBasicParser.RULE_usrfunc = 84;
jvmBasicParser.RULE_leftfunc = 85;
jvmBasicParser.RULE_rightfunc = 86;
jvmBasicParser.RULE_strfunc = 87;
jvmBasicParser.RULE_fnfunc = 88;
jvmBasicParser.RULE_valfunc = 89;
jvmBasicParser.RULE_scrnfunc = 90;
jvmBasicParser.RULE_sinfunc = 91;
jvmBasicParser.RULE_cosfunc = 92;
jvmBasicParser.RULE_tanfunc = 93;
jvmBasicParser.RULE_atnfunc = 94;
jvmBasicParser.RULE_rndfunc = 95;
jvmBasicParser.RULE_sgnfunc = 96;
jvmBasicParser.RULE_expfunc = 97;
jvmBasicParser.RULE_logfunc = 98;
jvmBasicParser.RULE_absfunc = 99;
jvmBasicParser.RULE_tabfunc = 100;

class ProgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_prog;
    }

	EOF() {
	    return this.getToken(jvmBasicParser.EOF, 0);
	};

	line = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LineContext);
	    } else {
	        return this.getTypedRuleContext(LineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterProg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitProg(this);
		}
	}


}



class LineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_line;
    }

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	amprstmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmprstmtContext);
	    } else {
	        return this.getTypedRuleContext(AmprstmtContext,i);
	    }
	};

	COMMENT() {
	    return this.getToken(jvmBasicParser.COMMENT, 0);
	};

	REM() {
	    return this.getToken(jvmBasicParser.REM, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COLON);
	    } else {
	        return this.getToken(jvmBasicParser.COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLine(this);
		}
	}


}



class AmperoperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amperoper;
    }

	AMPERSAND() {
	    return this.getToken(jvmBasicParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmperoper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmperoper(this);
		}
	}


}



class LinenumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_linenumber;
    }

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLinenumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLinenumber(this);
		}
	}


}



class AmprstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amprstmt;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	amperoper() {
	    return this.getTypedRuleContext(AmperoperContext,0);
	};

	COMMENT() {
	    return this.getToken(jvmBasicParser.COMMENT, 0);
	};

	REM() {
	    return this.getToken(jvmBasicParser.REM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmprstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmprstmt(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_statement;
    }

	CLS() {
	    return this.getToken(jvmBasicParser.CLS, 0);
	};

	LOAD() {
	    return this.getToken(jvmBasicParser.LOAD, 0);
	};

	SAVE() {
	    return this.getToken(jvmBasicParser.SAVE, 0);
	};

	TRACE() {
	    return this.getToken(jvmBasicParser.TRACE, 0);
	};

	NOTRACE() {
	    return this.getToken(jvmBasicParser.NOTRACE, 0);
	};

	FLASH() {
	    return this.getToken(jvmBasicParser.FLASH, 0);
	};

	INVERSE() {
	    return this.getToken(jvmBasicParser.INVERSE, 0);
	};

	GR() {
	    return this.getToken(jvmBasicParser.GR, 0);
	};

	NORMAL() {
	    return this.getToken(jvmBasicParser.NORMAL, 0);
	};

	SHLOAD() {
	    return this.getToken(jvmBasicParser.SHLOAD, 0);
	};

	CLEAR() {
	    return this.getToken(jvmBasicParser.CLEAR, 0);
	};

	RUN() {
	    return this.getToken(jvmBasicParser.RUN, 0);
	};

	STOP() {
	    return this.getToken(jvmBasicParser.STOP, 0);
	};

	TEXT() {
	    return this.getToken(jvmBasicParser.TEXT, 0);
	};

	HOME() {
	    return this.getToken(jvmBasicParser.HOME, 0);
	};

	HGR() {
	    return this.getToken(jvmBasicParser.HGR, 0);
	};

	HGR2() {
	    return this.getToken(jvmBasicParser.HGR2, 0);
	};

	endstmt() {
	    return this.getTypedRuleContext(EndstmtContext,0);
	};

	returnstmt() {
	    return this.getTypedRuleContext(ReturnstmtContext,0);
	};

	restorestmt() {
	    return this.getTypedRuleContext(RestorestmtContext,0);
	};

	amptstmt() {
	    return this.getTypedRuleContext(AmptstmtContext,0);
	};

	popstmt() {
	    return this.getTypedRuleContext(PopstmtContext,0);
	};

	liststmt() {
	    return this.getTypedRuleContext(ListstmtContext,0);
	};

	storestmt() {
	    return this.getTypedRuleContext(StorestmtContext,0);
	};

	getstmt() {
	    return this.getTypedRuleContext(GetstmtContext,0);
	};

	recallstmt() {
	    return this.getTypedRuleContext(RecallstmtContext,0);
	};

	nextstmt() {
	    return this.getTypedRuleContext(NextstmtContext,0);
	};

	instmt() {
	    return this.getTypedRuleContext(InstmtContext,0);
	};

	prstmt() {
	    return this.getTypedRuleContext(PrstmtContext,0);
	};

	onerrstmt() {
	    return this.getTypedRuleContext(OnerrstmtContext,0);
	};

	hlinstmt() {
	    return this.getTypedRuleContext(HlinstmtContext,0);
	};

	vlinstmt() {
	    return this.getTypedRuleContext(VlinstmtContext,0);
	};

	colorstmt() {
	    return this.getTypedRuleContext(ColorstmtContext,0);
	};

	speedstmt() {
	    return this.getTypedRuleContext(SpeedstmtContext,0);
	};

	scalestmt() {
	    return this.getTypedRuleContext(ScalestmtContext,0);
	};

	rotstmt() {
	    return this.getTypedRuleContext(RotstmtContext,0);
	};

	hcolorstmt() {
	    return this.getTypedRuleContext(HcolorstmtContext,0);
	};

	himemstmt() {
	    return this.getTypedRuleContext(HimemstmtContext,0);
	};

	lomemstmt() {
	    return this.getTypedRuleContext(LomemstmtContext,0);
	};

	printstmt1() {
	    return this.getTypedRuleContext(Printstmt1Context,0);
	};

	pokestmt() {
	    return this.getTypedRuleContext(PokestmtContext,0);
	};

	plotstmt() {
	    return this.getTypedRuleContext(PlotstmtContext,0);
	};

	ongotostmt() {
	    return this.getTypedRuleContext(OngotostmtContext,0);
	};

	ongosubstmt() {
	    return this.getTypedRuleContext(OngosubstmtContext,0);
	};

	ifstmt() {
	    return this.getTypedRuleContext(IfstmtContext,0);
	};

	forstmt1() {
	    return this.getTypedRuleContext(Forstmt1Context,0);
	};

	forstmt2() {
	    return this.getTypedRuleContext(Forstmt2Context,0);
	};

	inputstmt() {
	    return this.getTypedRuleContext(InputstmtContext,0);
	};

	tabstmt() {
	    return this.getTypedRuleContext(TabstmtContext,0);
	};

	dimstmt() {
	    return this.getTypedRuleContext(DimstmtContext,0);
	};

	gotostmt() {
	    return this.getTypedRuleContext(GotostmtContext,0);
	};

	gosubstmt() {
	    return this.getTypedRuleContext(GosubstmtContext,0);
	};

	callstmt() {
	    return this.getTypedRuleContext(CallstmtContext,0);
	};

	readstmt() {
	    return this.getTypedRuleContext(ReadstmtContext,0);
	};

	hplotstmt() {
	    return this.getTypedRuleContext(HplotstmtContext,0);
	};

	vplotstmt() {
	    return this.getTypedRuleContext(VplotstmtContext,0);
	};

	vtabstmnt() {
	    return this.getTypedRuleContext(VtabstmntContext,0);
	};

	htabstmnt() {
	    return this.getTypedRuleContext(HtabstmntContext,0);
	};

	waitstmt() {
	    return this.getTypedRuleContext(WaitstmtContext,0);
	};

	datastmt() {
	    return this.getTypedRuleContext(DatastmtContext,0);
	};

	xdrawstmt() {
	    return this.getTypedRuleContext(XdrawstmtContext,0);
	};

	drawstmt() {
	    return this.getTypedRuleContext(DrawstmtContext,0);
	};

	defstmt() {
	    return this.getTypedRuleContext(DefstmtContext,0);
	};

	letstmt() {
	    return this.getTypedRuleContext(LetstmtContext,0);
	};

	includestmt() {
	    return this.getTypedRuleContext(IncludestmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStatement(this);
		}
	}


}



class VardeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vardecl;
    }

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.LPAREN);
	    } else {
	        return this.getToken(jvmBasicParser.LPAREN, i);
	    }
	};


	exprlist = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprlistContext);
	    } else {
	        return this.getTypedRuleContext(ExprlistContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.RPAREN);
	    } else {
	        return this.getToken(jvmBasicParser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVardecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVardecl(this);
		}
	}


}



class Printstmt1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_printstmt1;
    }

	PRINT() {
	    return this.getToken(jvmBasicParser.PRINT, 0);
	};

	QUESTION() {
	    return this.getToken(jvmBasicParser.QUESTION, 0);
	};

	printlist() {
	    return this.getTypedRuleContext(PrintlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrintstmt1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrintstmt1(this);
		}
	}


}



class PrintlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_printlist;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.SEMICOLON);
	    } else {
	        return this.getToken(jvmBasicParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrintlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrintlist(this);
		}
	}


}



class GetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_getstmt;
    }

	GET() {
	    return this.getToken(jvmBasicParser.GET, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGetstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGetstmt(this);
		}
	}


}



class LetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_letstmt;
    }

	variableassignment() {
	    return this.getTypedRuleContext(VariableassignmentContext,0);
	};

	LET() {
	    return this.getToken(jvmBasicParser.LET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLetstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLetstmt(this);
		}
	}


}



class VariableassignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_variableassignment;
    }

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVariableassignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVariableassignment(this);
		}
	}


}



class RelopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_relop;
    }

	GTE() {
	    return this.getToken(jvmBasicParser.GTE, 0);
	};

	GT() {
	    return this.getToken(jvmBasicParser.GT, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	LTE() {
	    return this.getToken(jvmBasicParser.LTE, 0);
	};

	LT() {
	    return this.getToken(jvmBasicParser.LT, 0);
	};

	neq() {
	    return this.getTypedRuleContext(NeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRelop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRelop(this);
		}
	}


}



class NeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_neq;
    }

	LT() {
	    return this.getToken(jvmBasicParser.LT, 0);
	};

	GT() {
	    return this.getToken(jvmBasicParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNeq(this);
		}
	}


}



class IfstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ifstmt;
    }

	IF() {
	    return this.getToken(jvmBasicParser.IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	THEN() {
	    return this.getToken(jvmBasicParser.THEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIfstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIfstmt(this);
		}
	}


}



class Forstmt1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_forstmt1;
    }

	FOR() {
	    return this.getToken(jvmBasicParser.FOR, 0);
	};

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(jvmBasicParser.TO, 0);
	};

	STEP() {
	    return this.getToken(jvmBasicParser.STEP, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	NEXT() {
	    return this.getToken(jvmBasicParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterForstmt1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitForstmt1(this);
		}
	}


}



class Forstmt2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_forstmt2;
    }

	FOR() {
	    return this.getToken(jvmBasicParser.FOR, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(jvmBasicParser.TO, 0);
	};

	STEP() {
	    return this.getToken(jvmBasicParser.STEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterForstmt2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitForstmt2(this);
		}
	}


}



class NextstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_nextstmt;
    }

	NEXT() {
	    return this.getToken(jvmBasicParser.NEXT, 0);
	};

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNextstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNextstmt(this);
		}
	}


}



class InputstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_inputstmt;
    }

	INPUT() {
	    return this.getToken(jvmBasicParser.INPUT, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	SEMICOLON() {
	    return this.getToken(jvmBasicParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterInputstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitInputstmt(this);
		}
	}


}



class ReadstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_readstmt;
    }

	READ() {
	    return this.getToken(jvmBasicParser.READ, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterReadstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitReadstmt(this);
		}
	}


}



class DimstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_dimstmt;
    }

	DIM() {
	    return this.getToken(jvmBasicParser.DIM, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDimstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDimstmt(this);
		}
	}


}



class GotostmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_gotostmt;
    }

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGotostmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGotostmt(this);
		}
	}


}



class GosubstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_gosubstmt;
    }

	GOSUB() {
	    return this.getToken(jvmBasicParser.GOSUB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGosubstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGosubstmt(this);
		}
	}


}



class PokestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_pokestmt;
    }

	POKE() {
	    return this.getToken(jvmBasicParser.POKE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPokestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPokestmt(this);
		}
	}


}



class CallstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_callstmt;
    }

	CALL() {
	    return this.getToken(jvmBasicParser.CALL, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterCallstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitCallstmt(this);
		}
	}


}



class HplotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hplotstmt;
    }

	HPLOT() {
	    return this.getToken(jvmBasicParser.HPLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TO);
	    } else {
	        return this.getToken(jvmBasicParser.TO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHplotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHplotstmt(this);
		}
	}


}



class VplotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vplotstmt;
    }

	VPLOT() {
	    return this.getToken(jvmBasicParser.VPLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TO);
	    } else {
	        return this.getToken(jvmBasicParser.TO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVplotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVplotstmt(this);
		}
	}


}



class PlotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_plotstmt;
    }

	PLOT() {
	    return this.getToken(jvmBasicParser.PLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPlotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPlotstmt(this);
		}
	}


}



class OngotostmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ongotostmt;
    }

	ON() {
	    return this.getToken(jvmBasicParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinenumberContext);
	    } else {
	        return this.getTypedRuleContext(LinenumberContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOngotostmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOngotostmt(this);
		}
	}


}



class OngosubstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ongosubstmt;
    }

	ON() {
	    return this.getToken(jvmBasicParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	GOSUB() {
	    return this.getToken(jvmBasicParser.GOSUB, 0);
	};

	linenumber = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinenumberContext);
	    } else {
	        return this.getTypedRuleContext(LinenumberContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOngosubstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOngosubstmt(this);
		}
	}


}



class VtabstmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vtabstmnt;
    }

	VTAB() {
	    return this.getToken(jvmBasicParser.VTAB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVtabstmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVtabstmnt(this);
		}
	}


}



class HtabstmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_htabstmnt;
    }

	HTAB() {
	    return this.getToken(jvmBasicParser.HTAB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHtabstmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHtabstmnt(this);
		}
	}


}



class HimemstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_himemstmt;
    }

	HIMEM() {
	    return this.getToken(jvmBasicParser.HIMEM, 0);
	};

	COLON() {
	    return this.getToken(jvmBasicParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHimemstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHimemstmt(this);
		}
	}


}



class LomemstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_lomemstmt;
    }

	LOMEM() {
	    return this.getToken(jvmBasicParser.LOMEM, 0);
	};

	COLON() {
	    return this.getToken(jvmBasicParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLomemstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLomemstmt(this);
		}
	}


}



class DatastmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_datastmt;
    }

	DATA() {
	    return this.getToken(jvmBasicParser.DATA, 0);
	};

	datum = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatumContext);
	    } else {
	        return this.getTypedRuleContext(DatumContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDatastmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDatastmt(this);
		}
	}


}



class DatumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_datum;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDatum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDatum(this);
		}
	}


}



class WaitstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_waitstmt;
    }

	WAIT() {
	    return this.getToken(jvmBasicParser.WAIT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterWaitstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitWaitstmt(this);
		}
	}


}



class XdrawstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_xdrawstmt;
    }

	XDRAW() {
	    return this.getToken(jvmBasicParser.XDRAW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterXdrawstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitXdrawstmt(this);
		}
	}


}



class DrawstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_drawstmt;
    }

	DRAW() {
	    return this.getToken(jvmBasicParser.DRAW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDrawstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDrawstmt(this);
		}
	}


}



class DefstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_defstmt;
    }

	DEF() {
	    return this.getToken(jvmBasicParser.DEF, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_Context);
	    } else {
	        return this.getTypedRuleContext(Var_Context,i);
	    }
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FN() {
	    return this.getToken(jvmBasicParser.FN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDefstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDefstmt(this);
		}
	}


}



class TabstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tabstmt;
    }

	TAB() {
	    return this.getToken(jvmBasicParser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTabstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTabstmt(this);
		}
	}


}



class SpeedstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_speedstmt;
    }

	SPEED() {
	    return this.getToken(jvmBasicParser.SPEED, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSpeedstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSpeedstmt(this);
		}
	}


}



class RotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rotstmt;
    }

	ROT() {
	    return this.getToken(jvmBasicParser.ROT, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRotstmt(this);
		}
	}


}



class ScalestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_scalestmt;
    }

	SCALE() {
	    return this.getToken(jvmBasicParser.SCALE, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterScalestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitScalestmt(this);
		}
	}


}



class ColorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_colorstmt;
    }

	COLOR() {
	    return this.getToken(jvmBasicParser.COLOR, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterColorstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitColorstmt(this);
		}
	}


}



class HcolorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hcolorstmt;
    }

	HCOLOR() {
	    return this.getToken(jvmBasicParser.HCOLOR, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHcolorstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHcolorstmt(this);
		}
	}


}



class HlinstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hlinstmt;
    }

	HLIN() {
	    return this.getToken(jvmBasicParser.HLIN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHlinstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHlinstmt(this);
		}
	}


}



class VlinstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vlinstmt;
    }

	VLIN() {
	    return this.getToken(jvmBasicParser.VLIN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVlinstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVlinstmt(this);
		}
	}


}



class OnerrstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_onerrstmt;
    }

	ONERR() {
	    return this.getToken(jvmBasicParser.ONERR, 0);
	};

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOnerrstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOnerrstmt(this);
		}
	}


}



class PrstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_prstmt;
    }

	PRNUMBER() {
	    return this.getToken(jvmBasicParser.PRNUMBER, 0);
	};

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrstmt(this);
		}
	}


}



class InstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_instmt;
    }

	INNUMBER() {
	    return this.getToken(jvmBasicParser.INNUMBER, 0);
	};

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterInstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitInstmt(this);
		}
	}


}



class StorestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_storestmt;
    }

	STORE() {
	    return this.getToken(jvmBasicParser.STORE, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStorestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStorestmt(this);
		}
	}


}



class RecallstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_recallstmt;
    }

	RECALL() {
	    return this.getToken(jvmBasicParser.RECALL, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRecallstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRecallstmt(this);
		}
	}


}



class ListstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_liststmt;
    }

	LIST() {
	    return this.getToken(jvmBasicParser.LIST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterListstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitListstmt(this);
		}
	}


}



class PopstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_popstmt;
    }

	POP() {
	    return this.getToken(jvmBasicParser.POP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPopstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPopstmt(this);
		}
	}


}



class AmptstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amptstmt;
    }

	AMPERSAND() {
	    return this.getToken(jvmBasicParser.AMPERSAND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmptstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmptstmt(this);
		}
	}


}



class IncludestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_includestmt;
    }

	INCLUDE() {
	    return this.getToken(jvmBasicParser.INCLUDE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIncludestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIncludestmt(this);
		}
	}


}



class EndstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_endstmt;
    }

	END() {
	    return this.getToken(jvmBasicParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterEndstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitEndstmt(this);
		}
	}


}



class ReturnstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_returnstmt;
    }

	RETURN() {
	    return this.getToken(jvmBasicParser.RETURN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterReturnstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitReturnstmt(this);
		}
	}


}



class RestorestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_restorestmt;
    }

	RESTORE() {
	    return this.getToken(jvmBasicParser.RESTORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRestorestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRestorestmt(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_number;
    }

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	FLOAT() {
	    return this.getToken(jvmBasicParser.FLOAT, 0);
	};

	PLUS() {
	    return this.getToken(jvmBasicParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(jvmBasicParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNumber(this);
		}
	}


}



class Func_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_func_;
    }

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	tabfunc() {
	    return this.getTypedRuleContext(TabfuncContext,0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	chrfunc() {
	    return this.getTypedRuleContext(ChrfuncContext,0);
	};

	sqrfunc() {
	    return this.getTypedRuleContext(SqrfuncContext,0);
	};

	lenfunc() {
	    return this.getTypedRuleContext(LenfuncContext,0);
	};

	strfunc() {
	    return this.getTypedRuleContext(StrfuncContext,0);
	};

	ascfunc() {
	    return this.getTypedRuleContext(AscfuncContext,0);
	};

	scrnfunc() {
	    return this.getTypedRuleContext(ScrnfuncContext,0);
	};

	midfunc() {
	    return this.getTypedRuleContext(MidfuncContext,0);
	};

	pdlfunc() {
	    return this.getTypedRuleContext(PdlfuncContext,0);
	};

	peekfunc() {
	    return this.getTypedRuleContext(PeekfuncContext,0);
	};

	intfunc() {
	    return this.getTypedRuleContext(IntfuncContext,0);
	};

	spcfunc() {
	    return this.getTypedRuleContext(SpcfuncContext,0);
	};

	frefunc() {
	    return this.getTypedRuleContext(FrefuncContext,0);
	};

	posfunc() {
	    return this.getTypedRuleContext(PosfuncContext,0);
	};

	usrfunc() {
	    return this.getTypedRuleContext(UsrfuncContext,0);
	};

	leftfunc() {
	    return this.getTypedRuleContext(LeftfuncContext,0);
	};

	valfunc() {
	    return this.getTypedRuleContext(ValfuncContext,0);
	};

	rightfunc() {
	    return this.getTypedRuleContext(RightfuncContext,0);
	};

	fnfunc() {
	    return this.getTypedRuleContext(FnfuncContext,0);
	};

	sinfunc() {
	    return this.getTypedRuleContext(SinfuncContext,0);
	};

	cosfunc() {
	    return this.getTypedRuleContext(CosfuncContext,0);
	};

	tanfunc() {
	    return this.getTypedRuleContext(TanfuncContext,0);
	};

	atnfunc() {
	    return this.getTypedRuleContext(AtnfuncContext,0);
	};

	rndfunc() {
	    return this.getTypedRuleContext(RndfuncContext,0);
	};

	sgnfunc() {
	    return this.getTypedRuleContext(SgnfuncContext,0);
	};

	expfunc() {
	    return this.getTypedRuleContext(ExpfuncContext,0);
	};

	logfunc() {
	    return this.getTypedRuleContext(LogfuncContext,0);
	};

	absfunc() {
	    return this.getTypedRuleContext(AbsfuncContext,0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFunc_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFunc_(this);
		}
	}


}



class SignExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_signExpression;
    }

	func_() {
	    return this.getTypedRuleContext(Func_Context,0);
	};

	NOT() {
	    return this.getToken(jvmBasicParser.NOT, 0);
	};

	PLUS() {
	    return this.getToken(jvmBasicParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(jvmBasicParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSignExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSignExpression(this);
		}
	}


}



class ExponentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_exponentExpression;
    }

	signExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SignExpressionContext,i);
	    }
	};

	EXPONENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.EXPONENT);
	    } else {
	        return this.getToken(jvmBasicParser.EXPONENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExponentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExponentExpression(this);
		}
	}


}



class MultiplyingExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_multiplyingExpression;
    }

	exponentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExponentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExponentExpressionContext,i);
	    }
	};

	TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TIMES);
	    } else {
	        return this.getToken(jvmBasicParser.TIMES, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.DIV);
	    } else {
	        return this.getToken(jvmBasicParser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterMultiplyingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitMultiplyingExpression(this);
		}
	}


}



class AddingExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_addingExpression;
    }

	multiplyingExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyingExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyingExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.PLUS);
	    } else {
	        return this.getToken(jvmBasicParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.MINUS);
	    } else {
	        return this.getToken(jvmBasicParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAddingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAddingExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_relationalExpression;
    }

	addingExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddingExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AddingExpressionContext,i);
	    }
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_expression;
    }

	func_() {
	    return this.getTypedRuleContext(Func_Context,0);
	};

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.AND);
	    } else {
	        return this.getToken(jvmBasicParser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.OR);
	    } else {
	        return this.getToken(jvmBasicParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Var_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_var_;
    }

	varname() {
	    return this.getTypedRuleContext(VarnameContext,0);
	};

	varsuffix() {
	    return this.getTypedRuleContext(VarsuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVar_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVar_(this);
		}
	}


}



class VarnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varname;
    }

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.LETTERS);
	    } else {
	        return this.getToken(jvmBasicParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.NUMBER);
	    } else {
	        return this.getToken(jvmBasicParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarname(this);
		}
	}


}



class VarsuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varsuffix;
    }

	DOLLAR() {
	    return this.getToken(jvmBasicParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(jvmBasicParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarsuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarsuffix(this);
		}
	}


}



class VarlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varlist;
    }

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarlist(this);
		}
	}


}



class ExprlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_exprlist;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExprlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExprlist(this);
		}
	}


}



class SqrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sqrfunc;
    }

	SQR() {
	    return this.getToken(jvmBasicParser.SQR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSqrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSqrfunc(this);
		}
	}


}



class ChrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_chrfunc;
    }

	CHR() {
	    return this.getToken(jvmBasicParser.CHR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterChrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitChrfunc(this);
		}
	}


}



class LenfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_lenfunc;
    }

	LEN() {
	    return this.getToken(jvmBasicParser.LEN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLenfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLenfunc(this);
		}
	}


}



class AscfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ascfunc;
    }

	ASC() {
	    return this.getToken(jvmBasicParser.ASC, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAscfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAscfunc(this);
		}
	}


}



class MidfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_midfunc;
    }

	MID() {
	    return this.getToken(jvmBasicParser.MID, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterMidfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitMidfunc(this);
		}
	}


}



class PdlfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_pdlfunc;
    }

	PDL() {
	    return this.getToken(jvmBasicParser.PDL, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPdlfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPdlfunc(this);
		}
	}


}



class PeekfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_peekfunc;
    }

	PEEK() {
	    return this.getToken(jvmBasicParser.PEEK, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPeekfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPeekfunc(this);
		}
	}


}



class IntfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_intfunc;
    }

	INTF() {
	    return this.getToken(jvmBasicParser.INTF, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIntfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIntfunc(this);
		}
	}


}



class SpcfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_spcfunc;
    }

	SPC() {
	    return this.getToken(jvmBasicParser.SPC, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSpcfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSpcfunc(this);
		}
	}


}



class FrefuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_frefunc;
    }

	FRE() {
	    return this.getToken(jvmBasicParser.FRE, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFrefunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFrefunc(this);
		}
	}


}



class PosfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_posfunc;
    }

	POS() {
	    return this.getToken(jvmBasicParser.POS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPosfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPosfunc(this);
		}
	}


}



class UsrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_usrfunc;
    }

	USR() {
	    return this.getToken(jvmBasicParser.USR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterUsrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitUsrfunc(this);
		}
	}


}



class LeftfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_leftfunc;
    }

	LEFT() {
	    return this.getToken(jvmBasicParser.LEFT, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLeftfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLeftfunc(this);
		}
	}


}



class RightfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rightfunc;
    }

	RIGHT() {
	    return this.getToken(jvmBasicParser.RIGHT, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRightfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRightfunc(this);
		}
	}


}



class StrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_strfunc;
    }

	STR() {
	    return this.getToken(jvmBasicParser.STR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStrfunc(this);
		}
	}


}



class FnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_fnfunc;
    }

	FN() {
	    return this.getToken(jvmBasicParser.FN, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFnfunc(this);
		}
	}


}



class ValfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_valfunc;
    }

	VAL() {
	    return this.getToken(jvmBasicParser.VAL, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterValfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitValfunc(this);
		}
	}


}



class ScrnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_scrnfunc;
    }

	SCRN() {
	    return this.getToken(jvmBasicParser.SCRN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterScrnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitScrnfunc(this);
		}
	}


}



class SinfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sinfunc;
    }

	SIN() {
	    return this.getToken(jvmBasicParser.SIN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSinfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSinfunc(this);
		}
	}


}



class CosfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_cosfunc;
    }

	COS() {
	    return this.getToken(jvmBasicParser.COS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterCosfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitCosfunc(this);
		}
	}


}



class TanfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tanfunc;
    }

	TAN() {
	    return this.getToken(jvmBasicParser.TAN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTanfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTanfunc(this);
		}
	}


}



class AtnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_atnfunc;
    }

	ATN() {
	    return this.getToken(jvmBasicParser.ATN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAtnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAtnfunc(this);
		}
	}


}



class RndfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rndfunc;
    }

	RND() {
	    return this.getToken(jvmBasicParser.RND, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRndfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRndfunc(this);
		}
	}


}



class SgnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sgnfunc;
    }

	SGN() {
	    return this.getToken(jvmBasicParser.SGN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSgnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSgnfunc(this);
		}
	}


}



class ExpfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_expfunc;
    }

	EXP() {
	    return this.getToken(jvmBasicParser.EXP, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExpfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExpfunc(this);
		}
	}


}



class LogfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_logfunc;
    }

	LOG() {
	    return this.getToken(jvmBasicParser.LOG, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLogfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLogfunc(this);
		}
	}


}



class AbsfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_absfunc;
    }

	ABS() {
	    return this.getToken(jvmBasicParser.ABS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAbsfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAbsfunc(this);
		}
	}


}



class TabfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tabfunc;
    }

	TAB() {
	    return this.getToken(jvmBasicParser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTabfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTabfunc(this);
		}
	}


}




jvmBasicParser.ProgContext = ProgContext; 
jvmBasicParser.LineContext = LineContext; 
jvmBasicParser.AmperoperContext = AmperoperContext; 
jvmBasicParser.LinenumberContext = LinenumberContext; 
jvmBasicParser.AmprstmtContext = AmprstmtContext; 
jvmBasicParser.StatementContext = StatementContext; 
jvmBasicParser.VardeclContext = VardeclContext; 
jvmBasicParser.Printstmt1Context = Printstmt1Context; 
jvmBasicParser.PrintlistContext = PrintlistContext; 
jvmBasicParser.GetstmtContext = GetstmtContext; 
jvmBasicParser.LetstmtContext = LetstmtContext; 
jvmBasicParser.VariableassignmentContext = VariableassignmentContext; 
jvmBasicParser.RelopContext = RelopContext; 
jvmBasicParser.NeqContext = NeqContext; 
jvmBasicParser.IfstmtContext = IfstmtContext; 
jvmBasicParser.Forstmt1Context = Forstmt1Context; 
jvmBasicParser.Forstmt2Context = Forstmt2Context; 
jvmBasicParser.NextstmtContext = NextstmtContext; 
jvmBasicParser.InputstmtContext = InputstmtContext; 
jvmBasicParser.ReadstmtContext = ReadstmtContext; 
jvmBasicParser.DimstmtContext = DimstmtContext; 
jvmBasicParser.GotostmtContext = GotostmtContext; 
jvmBasicParser.GosubstmtContext = GosubstmtContext; 
jvmBasicParser.PokestmtContext = PokestmtContext; 
jvmBasicParser.CallstmtContext = CallstmtContext; 
jvmBasicParser.HplotstmtContext = HplotstmtContext; 
jvmBasicParser.VplotstmtContext = VplotstmtContext; 
jvmBasicParser.PlotstmtContext = PlotstmtContext; 
jvmBasicParser.OngotostmtContext = OngotostmtContext; 
jvmBasicParser.OngosubstmtContext = OngosubstmtContext; 
jvmBasicParser.VtabstmntContext = VtabstmntContext; 
jvmBasicParser.HtabstmntContext = HtabstmntContext; 
jvmBasicParser.HimemstmtContext = HimemstmtContext; 
jvmBasicParser.LomemstmtContext = LomemstmtContext; 
jvmBasicParser.DatastmtContext = DatastmtContext; 
jvmBasicParser.DatumContext = DatumContext; 
jvmBasicParser.WaitstmtContext = WaitstmtContext; 
jvmBasicParser.XdrawstmtContext = XdrawstmtContext; 
jvmBasicParser.DrawstmtContext = DrawstmtContext; 
jvmBasicParser.DefstmtContext = DefstmtContext; 
jvmBasicParser.TabstmtContext = TabstmtContext; 
jvmBasicParser.SpeedstmtContext = SpeedstmtContext; 
jvmBasicParser.RotstmtContext = RotstmtContext; 
jvmBasicParser.ScalestmtContext = ScalestmtContext; 
jvmBasicParser.ColorstmtContext = ColorstmtContext; 
jvmBasicParser.HcolorstmtContext = HcolorstmtContext; 
jvmBasicParser.HlinstmtContext = HlinstmtContext; 
jvmBasicParser.VlinstmtContext = VlinstmtContext; 
jvmBasicParser.OnerrstmtContext = OnerrstmtContext; 
jvmBasicParser.PrstmtContext = PrstmtContext; 
jvmBasicParser.InstmtContext = InstmtContext; 
jvmBasicParser.StorestmtContext = StorestmtContext; 
jvmBasicParser.RecallstmtContext = RecallstmtContext; 
jvmBasicParser.ListstmtContext = ListstmtContext; 
jvmBasicParser.PopstmtContext = PopstmtContext; 
jvmBasicParser.AmptstmtContext = AmptstmtContext; 
jvmBasicParser.IncludestmtContext = IncludestmtContext; 
jvmBasicParser.EndstmtContext = EndstmtContext; 
jvmBasicParser.ReturnstmtContext = ReturnstmtContext; 
jvmBasicParser.RestorestmtContext = RestorestmtContext; 
jvmBasicParser.NumberContext = NumberContext; 
jvmBasicParser.Func_Context = Func_Context; 
jvmBasicParser.SignExpressionContext = SignExpressionContext; 
jvmBasicParser.ExponentExpressionContext = ExponentExpressionContext; 
jvmBasicParser.MultiplyingExpressionContext = MultiplyingExpressionContext; 
jvmBasicParser.AddingExpressionContext = AddingExpressionContext; 
jvmBasicParser.RelationalExpressionContext = RelationalExpressionContext; 
jvmBasicParser.ExpressionContext = ExpressionContext; 
jvmBasicParser.Var_Context = Var_Context; 
jvmBasicParser.VarnameContext = VarnameContext; 
jvmBasicParser.VarsuffixContext = VarsuffixContext; 
jvmBasicParser.VarlistContext = VarlistContext; 
jvmBasicParser.ExprlistContext = ExprlistContext; 
jvmBasicParser.SqrfuncContext = SqrfuncContext; 
jvmBasicParser.ChrfuncContext = ChrfuncContext; 
jvmBasicParser.LenfuncContext = LenfuncContext; 
jvmBasicParser.AscfuncContext = AscfuncContext; 
jvmBasicParser.MidfuncContext = MidfuncContext; 
jvmBasicParser.PdlfuncContext = PdlfuncContext; 
jvmBasicParser.PeekfuncContext = PeekfuncContext; 
jvmBasicParser.IntfuncContext = IntfuncContext; 
jvmBasicParser.SpcfuncContext = SpcfuncContext; 
jvmBasicParser.FrefuncContext = FrefuncContext; 
jvmBasicParser.PosfuncContext = PosfuncContext; 
jvmBasicParser.UsrfuncContext = UsrfuncContext; 
jvmBasicParser.LeftfuncContext = LeftfuncContext; 
jvmBasicParser.RightfuncContext = RightfuncContext; 
jvmBasicParser.StrfuncContext = StrfuncContext; 
jvmBasicParser.FnfuncContext = FnfuncContext; 
jvmBasicParser.ValfuncContext = ValfuncContext; 
jvmBasicParser.ScrnfuncContext = ScrnfuncContext; 
jvmBasicParser.SinfuncContext = SinfuncContext; 
jvmBasicParser.CosfuncContext = CosfuncContext; 
jvmBasicParser.TanfuncContext = TanfuncContext; 
jvmBasicParser.AtnfuncContext = AtnfuncContext; 
jvmBasicParser.RndfuncContext = RndfuncContext; 
jvmBasicParser.SgnfuncContext = SgnfuncContext; 
jvmBasicParser.ExpfuncContext = ExpfuncContext; 
jvmBasicParser.LogfuncContext = LogfuncContext; 
jvmBasicParser.AbsfuncContext = AbsfuncContext; 
jvmBasicParser.TabfuncContext = TabfuncContext; 
